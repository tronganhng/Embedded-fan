
BaiTapLonNhung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080018e0  080018e0  000028e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019a4  080019a4  00003054  2**0
                  CONTENTS
  4 .ARM          00000000  080019a4  080019a4  00003054  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019a4  080019a4  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019a4  080019a4  000029a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080019a8  080019a8  000029a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080019ac  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  08001a00  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08001a00  000031c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000117d  00000000  00000000  0000307d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000624  00000000  00000000  000041fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00004820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000177  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ff3  00000000  00000000  00004baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029a0  00000000  00000000  0001aba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eed2  00000000  00000000  0001d542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000da0  00000000  00000000  0009c458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0009d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	080018c8 	.word	0x080018c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	080018c8 	.word	0x080018c8

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	@ 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_frsub>:
 800062c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000630:	e002      	b.n	8000638 <__addsf3>
 8000632:	bf00      	nop

08000634 <__aeabi_fsub>:
 8000634:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000638 <__addsf3>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	bf1f      	itttt	ne
 800063c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000640:	ea92 0f03 	teqne	r2, r3
 8000644:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000648:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800064c:	d06a      	beq.n	8000724 <__addsf3+0xec>
 800064e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000652:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000656:	bfc1      	itttt	gt
 8000658:	18d2      	addgt	r2, r2, r3
 800065a:	4041      	eorgt	r1, r0
 800065c:	4048      	eorgt	r0, r1
 800065e:	4041      	eorgt	r1, r0
 8000660:	bfb8      	it	lt
 8000662:	425b      	neglt	r3, r3
 8000664:	2b19      	cmp	r3, #25
 8000666:	bf88      	it	hi
 8000668:	4770      	bxhi	lr
 800066a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800066e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000672:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000676:	bf18      	it	ne
 8000678:	4240      	negne	r0, r0
 800067a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800067e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000682:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000686:	bf18      	it	ne
 8000688:	4249      	negne	r1, r1
 800068a:	ea92 0f03 	teq	r2, r3
 800068e:	d03f      	beq.n	8000710 <__addsf3+0xd8>
 8000690:	f1a2 0201 	sub.w	r2, r2, #1
 8000694:	fa41 fc03 	asr.w	ip, r1, r3
 8000698:	eb10 000c 	adds.w	r0, r0, ip
 800069c:	f1c3 0320 	rsb	r3, r3, #32
 80006a0:	fa01 f103 	lsl.w	r1, r1, r3
 80006a4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006a8:	d502      	bpl.n	80006b0 <__addsf3+0x78>
 80006aa:	4249      	negs	r1, r1
 80006ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006b0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006b4:	d313      	bcc.n	80006de <__addsf3+0xa6>
 80006b6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ba:	d306      	bcc.n	80006ca <__addsf3+0x92>
 80006bc:	0840      	lsrs	r0, r0, #1
 80006be:	ea4f 0131 	mov.w	r1, r1, rrx
 80006c2:	f102 0201 	add.w	r2, r2, #1
 80006c6:	2afe      	cmp	r2, #254	@ 0xfe
 80006c8:	d251      	bcs.n	800076e <__addsf3+0x136>
 80006ca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80006ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006d2:	bf08      	it	eq
 80006d4:	f020 0001 	biceq.w	r0, r0, #1
 80006d8:	ea40 0003 	orr.w	r0, r0, r3
 80006dc:	4770      	bx	lr
 80006de:	0049      	lsls	r1, r1, #1
 80006e0:	eb40 0000 	adc.w	r0, r0, r0
 80006e4:	3a01      	subs	r2, #1
 80006e6:	bf28      	it	cs
 80006e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80006ec:	d2ed      	bcs.n	80006ca <__addsf3+0x92>
 80006ee:	fab0 fc80 	clz	ip, r0
 80006f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f6:	ebb2 020c 	subs.w	r2, r2, ip
 80006fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fe:	bfaa      	itet	ge
 8000700:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000704:	4252      	neglt	r2, r2
 8000706:	4318      	orrge	r0, r3
 8000708:	bfbc      	itt	lt
 800070a:	40d0      	lsrlt	r0, r2
 800070c:	4318      	orrlt	r0, r3
 800070e:	4770      	bx	lr
 8000710:	f092 0f00 	teq	r2, #0
 8000714:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000718:	bf06      	itte	eq
 800071a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800071e:	3201      	addeq	r2, #1
 8000720:	3b01      	subne	r3, #1
 8000722:	e7b5      	b.n	8000690 <__addsf3+0x58>
 8000724:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000728:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800072c:	bf18      	it	ne
 800072e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000732:	d021      	beq.n	8000778 <__addsf3+0x140>
 8000734:	ea92 0f03 	teq	r2, r3
 8000738:	d004      	beq.n	8000744 <__addsf3+0x10c>
 800073a:	f092 0f00 	teq	r2, #0
 800073e:	bf08      	it	eq
 8000740:	4608      	moveq	r0, r1
 8000742:	4770      	bx	lr
 8000744:	ea90 0f01 	teq	r0, r1
 8000748:	bf1c      	itt	ne
 800074a:	2000      	movne	r0, #0
 800074c:	4770      	bxne	lr
 800074e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000752:	d104      	bne.n	800075e <__addsf3+0x126>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	bf28      	it	cs
 8000758:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800075c:	4770      	bx	lr
 800075e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000762:	bf3c      	itt	cc
 8000764:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000768:	4770      	bxcc	lr
 800076a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800076e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000772:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000776:	4770      	bx	lr
 8000778:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800077c:	bf16      	itet	ne
 800077e:	4608      	movne	r0, r1
 8000780:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000784:	4601      	movne	r1, r0
 8000786:	0242      	lsls	r2, r0, #9
 8000788:	bf06      	itte	eq
 800078a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078e:	ea90 0f01 	teqeq	r0, r1
 8000792:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000796:	4770      	bx	lr

08000798 <__aeabi_ui2f>:
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	e004      	b.n	80007a8 <__aeabi_i2f+0x8>
 800079e:	bf00      	nop

080007a0 <__aeabi_i2f>:
 80007a0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	bf48      	it	mi
 80007a6:	4240      	negmi	r0, r0
 80007a8:	ea5f 0c00 	movs.w	ip, r0
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007b4:	4601      	mov	r1, r0
 80007b6:	f04f 0000 	mov.w	r0, #0
 80007ba:	e01c      	b.n	80007f6 <__aeabi_l2f+0x2a>

080007bc <__aeabi_ul2f>:
 80007bc:	ea50 0201 	orrs.w	r2, r0, r1
 80007c0:	bf08      	it	eq
 80007c2:	4770      	bxeq	lr
 80007c4:	f04f 0300 	mov.w	r3, #0
 80007c8:	e00a      	b.n	80007e0 <__aeabi_l2f+0x14>
 80007ca:	bf00      	nop

080007cc <__aeabi_l2f>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__aeabi_l2f+0x14>
 80007da:	4240      	negs	r0, r0
 80007dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007e0:	ea5f 0c01 	movs.w	ip, r1
 80007e4:	bf02      	ittt	eq
 80007e6:	4684      	moveq	ip, r0
 80007e8:	4601      	moveq	r1, r0
 80007ea:	2000      	moveq	r0, #0
 80007ec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80007f0:	bf08      	it	eq
 80007f2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80007fa:	fabc f28c 	clz	r2, ip
 80007fe:	3a08      	subs	r2, #8
 8000800:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000804:	db10      	blt.n	8000828 <__aeabi_l2f+0x5c>
 8000806:	fa01 fc02 	lsl.w	ip, r1, r2
 800080a:	4463      	add	r3, ip
 800080c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000810:	f1c2 0220 	rsb	r2, r2, #32
 8000814:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000818:	fa20 f202 	lsr.w	r2, r0, r2
 800081c:	eb43 0002 	adc.w	r0, r3, r2
 8000820:	bf08      	it	eq
 8000822:	f020 0001 	biceq.w	r0, r0, #1
 8000826:	4770      	bx	lr
 8000828:	f102 0220 	add.w	r2, r2, #32
 800082c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000830:	f1c2 0220 	rsb	r2, r2, #32
 8000834:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000838:	fa21 f202 	lsr.w	r2, r1, r2
 800083c:	eb43 0002 	adc.w	r0, r3, r2
 8000840:	bf08      	it	eq
 8000842:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000846:	4770      	bx	lr

08000848 <__gesf2>:
 8000848:	f04f 3cff 	mov.w	ip, #4294967295
 800084c:	e006      	b.n	800085c <__cmpsf2+0x4>
 800084e:	bf00      	nop

08000850 <__lesf2>:
 8000850:	f04f 0c01 	mov.w	ip, #1
 8000854:	e002      	b.n	800085c <__cmpsf2+0x4>
 8000856:	bf00      	nop

08000858 <__cmpsf2>:
 8000858:	f04f 0c01 	mov.w	ip, #1
 800085c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000860:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000864:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000868:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800086c:	bf18      	it	ne
 800086e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000872:	d011      	beq.n	8000898 <__cmpsf2+0x40>
 8000874:	b001      	add	sp, #4
 8000876:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800087a:	bf18      	it	ne
 800087c:	ea90 0f01 	teqne	r0, r1
 8000880:	bf58      	it	pl
 8000882:	ebb2 0003 	subspl.w	r0, r2, r3
 8000886:	bf88      	it	hi
 8000888:	17c8      	asrhi	r0, r1, #31
 800088a:	bf38      	it	cc
 800088c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000890:	bf18      	it	ne
 8000892:	f040 0001 	orrne.w	r0, r0, #1
 8000896:	4770      	bx	lr
 8000898:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800089c:	d102      	bne.n	80008a4 <__cmpsf2+0x4c>
 800089e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80008a2:	d105      	bne.n	80008b0 <__cmpsf2+0x58>
 80008a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80008a8:	d1e4      	bne.n	8000874 <__cmpsf2+0x1c>
 80008aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80008ae:	d0e1      	beq.n	8000874 <__cmpsf2+0x1c>
 80008b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop

080008b8 <__aeabi_cfrcmple>:
 80008b8:	4684      	mov	ip, r0
 80008ba:	4608      	mov	r0, r1
 80008bc:	4661      	mov	r1, ip
 80008be:	e7ff      	b.n	80008c0 <__aeabi_cfcmpeq>

080008c0 <__aeabi_cfcmpeq>:
 80008c0:	b50f      	push	{r0, r1, r2, r3, lr}
 80008c2:	f7ff ffc9 	bl	8000858 <__cmpsf2>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	bf48      	it	mi
 80008ca:	f110 0f00 	cmnmi.w	r0, #0
 80008ce:	bd0f      	pop	{r0, r1, r2, r3, pc}

080008d0 <__aeabi_fcmpeq>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff fff4 	bl	80008c0 <__aeabi_cfcmpeq>
 80008d8:	bf0c      	ite	eq
 80008da:	2001      	moveq	r0, #1
 80008dc:	2000      	movne	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_fcmplt>:
 80008e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e8:	f7ff ffea 	bl	80008c0 <__aeabi_cfcmpeq>
 80008ec:	bf34      	ite	cc
 80008ee:	2001      	movcc	r0, #1
 80008f0:	2000      	movcs	r0, #0
 80008f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f6:	bf00      	nop

080008f8 <__aeabi_fcmple>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff ffe0 	bl	80008c0 <__aeabi_cfcmpeq>
 8000900:	bf94      	ite	ls
 8000902:	2001      	movls	r0, #1
 8000904:	2000      	movhi	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_fcmpge>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffd2 	bl	80008b8 <__aeabi_cfrcmple>
 8000914:	bf94      	ite	ls
 8000916:	2001      	movls	r0, #1
 8000918:	2000      	movhi	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_fcmpgt>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffc8 	bl	80008b8 <__aeabi_cfrcmple>
 8000928:	bf34      	ite	cc
 800092a:	2001      	movcc	r0, #1
 800092c:	2000      	movcs	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <uart_init>:
void dht22_output_mode(void);
void dht22_input_mode(void);
uint8_t dht22_read(float *temperature, float *humidity);

// ==== UART ====
void uart_init(void) {
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN | RCC_APB2ENR_AFIOEN;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <uart_init+0x44>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <uart_init+0x44>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000942:	f043 0305 	orr.w	r3, r3, #5
 8000946:	6193      	str	r3, [r2, #24]
    GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <uart_init+0x48>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <uart_init+0x48>)
 800094e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000952:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x0B << 4); // PA9: AF push-pull
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <uart_init+0x48>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	4a08      	ldr	r2, [pc, #32]	@ (800097c <uart_init+0x48>)
 800095a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800095e:	6053      	str	r3, [r2, #4]
    USART1->BRR = 72000000 / 9600;
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <uart_init+0x4c>)
 8000962:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8000966:	609a      	str	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_UE;
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <uart_init+0x4c>)
 800096a:	f242 0208 	movw	r2, #8200	@ 0x2008
 800096e:	60da      	str	r2, [r3, #12]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000
 800097c:	40010800 	.word	0x40010800
 8000980:	40013800 	.word	0x40013800

08000984 <uart_send>:

void uart_send(char *s) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
    while (*s) {
 800098c:	e00c      	b.n	80009a8 <uart_send+0x24>
        while (!(USART1->SR & USART_SR_TXE));
 800098e:	bf00      	nop
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <uart_send+0x38>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0f9      	beq.n	8000990 <uart_send+0xc>
        USART1->DR = *s++;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <uart_send+0x38>)
 80009a6:	605a      	str	r2, [r3, #4]
    while (*s) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1ee      	bne.n	800098e <uart_send+0xa>
    }
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40013800 	.word	0x40013800

080009c0 <SystemInit72MHz>:

// ==== System Clock 72MHz ====
void SystemInit72MHz(void) {
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
    FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_2;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <SystemInit72MHz+0x74>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <SystemInit72MHz+0x74>)
 80009ca:	f043 0314 	orr.w	r3, r3, #20
 80009ce:	6013      	str	r3, [r2, #0]
    RCC->CR |= RCC_CR_HSEON;
 80009d0:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <SystemInit72MHz+0x78>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a18      	ldr	r2, [pc, #96]	@ (8000a38 <SystemInit72MHz+0x78>)
 80009d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009da:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 80009dc:	bf00      	nop
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <SystemInit72MHz+0x78>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f9      	beq.n	80009de <SystemInit72MHz+0x1e>
    RCC->CFGR |= RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL9;
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <SystemInit72MHz+0x78>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <SystemInit72MHz+0x78>)
 80009f0:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 80009f4:	6053      	str	r3, [r2, #4]
    RCC->CR |= RCC_CR_PLLON;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <SystemInit72MHz+0x78>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <SystemInit72MHz+0x78>)
 80009fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a00:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8000a02:	bf00      	nop
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <SystemInit72MHz+0x78>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0f9      	beq.n	8000a04 <SystemInit72MHz+0x44>
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <SystemInit72MHz+0x78>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <SystemInit72MHz+0x78>)
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	6053      	str	r3, [r2, #4]
    while (!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000a1c:	bf00      	nop
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <SystemInit72MHz+0x78>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f9      	beq.n	8000a1e <SystemInit72MHz+0x5e>
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	40022000 	.word	0x40022000
 8000a38:	40021000 	.word	0x40021000

08000a3c <timer_init>:

// ==== Delay ====
void timer_init(void) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000a40:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <timer_init+0x3c>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	4a0c      	ldr	r2, [pc, #48]	@ (8000a78 <timer_init+0x3c>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	61d3      	str	r3, [r2, #28]
    TIM2->PSC = 72 - 1;
 8000a4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a50:	2247      	movs	r2, #71	@ 0x47
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 0xFFFF;
 8000a54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 8000a5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6013      	str	r3, [r2, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <delay_us>:

void delay_us(uint32_t us) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    TIM2->CNT = 0;
 8000a84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    while (TIM2->CNT < us);
 8000a8c:	bf00      	nop
 8000a8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d8f9      	bhi.n	8000a8e <delay_us+0x12>
}
 8000a9a:	bf00      	nop
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
    while (ms--) delay_us(1000);
 8000aae:	e003      	b.n	8000ab8 <delay_ms+0x12>
 8000ab0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab4:	f7ff ffe2 	bl	8000a7c <delay_us>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	1e5a      	subs	r2, r3, #1
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1f6      	bne.n	8000ab0 <delay_ms+0xa>
}
 8000ac2:	bf00      	nop
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <dht22_output_mode>:

// ==== GPIO DHT22 ====
void dht22_output_mode(void) {
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <dht22_output_mode+0x30>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a09      	ldr	r2, [pc, #36]	@ (8000afc <dht22_output_mode+0x30>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	6193      	str	r3, [r2, #24]
    GPIOB->CRH &= ~(0xF << 4);  // PB9
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <dht22_output_mode+0x34>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <dht22_output_mode+0x34>)
 8000ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ae6:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x3 << 4);   // Output 50MHz push-pull
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <dht22_output_mode+0x34>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <dht22_output_mode+0x34>)
 8000aee:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000af2:	6053      	str	r3, [r2, #4]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010c00 	.word	0x40010c00

08000b04 <dht22_input_mode>:

void dht22_input_mode(void) {
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <dht22_input_mode+0x30>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a09      	ldr	r2, [pc, #36]	@ (8000b34 <dht22_input_mode+0x30>)
 8000b0e:	f043 0308 	orr.w	r3, r3, #8
 8000b12:	6193      	str	r3, [r2, #24]
    GPIOB->CRH &= ~(0xF << 4);  // PB9
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <dht22_input_mode+0x34>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <dht22_input_mode+0x34>)
 8000b1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000b1e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x4 << 4);   // Input floating
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <dht22_input_mode+0x34>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <dht22_input_mode+0x34>)
 8000b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b2a:	6053      	str	r3, [r2, #4]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <dht22_read>:

// ==== DHT22 ====
uint8_t dht22_read(float *temperature, float *humidity) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
    uint8_t data[5] = {0};
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	733b      	strb	r3, [r7, #12]
    uint32_t timeout;

    // Start signal ≥1.5ms
    dht22_output_mode();
 8000b4e:	f7ff ffbd 	bl	8000acc <dht22_output_mode>
    GPIOB->ODR &= ~(1 << DHT22_PIN);
 8000b52:	4b6f      	ldr	r3, [pc, #444]	@ (8000d10 <dht22_read+0x1d4>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	4a6e      	ldr	r2, [pc, #440]	@ (8000d10 <dht22_read+0x1d4>)
 8000b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000b5c:	60d3      	str	r3, [r2, #12]
    delay_ms(2);
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f7ff ffa1 	bl	8000aa6 <delay_ms>
    GPIOB->ODR |= (1 << DHT22_PIN);
 8000b64:	4b6a      	ldr	r3, [pc, #424]	@ (8000d10 <dht22_read+0x1d4>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	4a69      	ldr	r2, [pc, #420]	@ (8000d10 <dht22_read+0x1d4>)
 8000b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b6e:	60d3      	str	r3, [r2, #12]
    delay_us(30);
 8000b70:	201e      	movs	r0, #30
 8000b72:	f7ff ff83 	bl	8000a7c <delay_us>
    dht22_input_mode();
 8000b76:	f7ff ffc5 	bl	8000b04 <dht22_input_mode>

    // Wait response
    timeout = 10000;
 8000b7a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000b7e:	617b      	str	r3, [r7, #20]
    while (!(GPIOB->IDR & (1 << DHT22_PIN)) && timeout--) delay_us(1);
 8000b80:	e002      	b.n	8000b88 <dht22_read+0x4c>
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff ff7a 	bl	8000a7c <delay_us>
 8000b88:	4b61      	ldr	r3, [pc, #388]	@ (8000d10 <dht22_read+0x1d4>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d104      	bne.n	8000b9e <dht22_read+0x62>
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	617a      	str	r2, [r7, #20]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f1      	bne.n	8000b82 <dht22_read+0x46>
    if (!timeout) return 1;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <dht22_read+0x6c>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e0ae      	b.n	8000d06 <dht22_read+0x1ca>
    timeout = 10000;
 8000ba8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000bac:	617b      	str	r3, [r7, #20]
    while ((GPIOB->IDR & (1 << DHT22_PIN)) && timeout--) delay_us(1);
 8000bae:	e002      	b.n	8000bb6 <dht22_read+0x7a>
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff ff63 	bl	8000a7c <delay_us>
 8000bb6:	4b56      	ldr	r3, [pc, #344]	@ (8000d10 <dht22_read+0x1d4>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <dht22_read+0x90>
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	617a      	str	r2, [r7, #20]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1f1      	bne.n	8000bb0 <dht22_read+0x74>
    if (!timeout) return 1;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <dht22_read+0x9a>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e097      	b.n	8000d06 <dht22_read+0x1ca>

    // Read 5 bytes
    for (uint8_t i = 0; i < 5; i++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	74fb      	strb	r3, [r7, #19]
 8000bda:	e051      	b.n	8000c80 <dht22_read+0x144>
        for (uint8_t j = 0; j < 8; j++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	74bb      	strb	r3, [r7, #18]
 8000be0:	e048      	b.n	8000c74 <dht22_read+0x138>
            timeout = 10000;
 8000be2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000be6:	617b      	str	r3, [r7, #20]
            while (!(GPIOB->IDR & (1 << DHT22_PIN)) && timeout--) delay_us(1);
 8000be8:	e002      	b.n	8000bf0 <dht22_read+0xb4>
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ff46 	bl	8000a7c <delay_us>
 8000bf0:	4b47      	ldr	r3, [pc, #284]	@ (8000d10 <dht22_read+0x1d4>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d104      	bne.n	8000c06 <dht22_read+0xca>
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	1e5a      	subs	r2, r3, #1
 8000c00:	617a      	str	r2, [r7, #20]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f1      	bne.n	8000bea <dht22_read+0xae>
            delay_us(40);
 8000c06:	2028      	movs	r0, #40	@ 0x28
 8000c08:	f7ff ff38 	bl	8000a7c <delay_us>
            data[i] <<= 1;
 8000c0c:	7cfb      	ldrb	r3, [r7, #19]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	443b      	add	r3, r7
 8000c12:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000c16:	7cfb      	ldrb	r3, [r7, #19]
 8000c18:	0052      	lsls	r2, r2, #1
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	3318      	adds	r3, #24
 8000c1e:	443b      	add	r3, r7
 8000c20:	f803 2c10 	strb.w	r2, [r3, #-16]
            if (GPIOB->IDR & (1 << DHT22_PIN)) data[i] |= 1;
 8000c24:	4b3a      	ldr	r3, [pc, #232]	@ (8000d10 <dht22_read+0x1d4>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00c      	beq.n	8000c4a <dht22_read+0x10e>
 8000c30:	7cfb      	ldrb	r3, [r7, #19]
 8000c32:	3318      	adds	r3, #24
 8000c34:	443b      	add	r3, r7
 8000c36:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000c3a:	7cfb      	ldrb	r3, [r7, #19]
 8000c3c:	f042 0201 	orr.w	r2, r2, #1
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	3318      	adds	r3, #24
 8000c44:	443b      	add	r3, r7
 8000c46:	f803 2c10 	strb.w	r2, [r3, #-16]
            timeout = 10000;
 8000c4a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c4e:	617b      	str	r3, [r7, #20]
            while ((GPIOB->IDR & (1 << DHT22_PIN)) && timeout--) delay_us(1);
 8000c50:	e002      	b.n	8000c58 <dht22_read+0x11c>
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff ff12 	bl	8000a7c <delay_us>
 8000c58:	4b2d      	ldr	r3, [pc, #180]	@ (8000d10 <dht22_read+0x1d4>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d004      	beq.n	8000c6e <dht22_read+0x132>
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	1e5a      	subs	r2, r3, #1
 8000c68:	617a      	str	r2, [r7, #20]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f1      	bne.n	8000c52 <dht22_read+0x116>
        for (uint8_t j = 0; j < 8; j++) {
 8000c6e:	7cbb      	ldrb	r3, [r7, #18]
 8000c70:	3301      	adds	r3, #1
 8000c72:	74bb      	strb	r3, [r7, #18]
 8000c74:	7cbb      	ldrb	r3, [r7, #18]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	d9b3      	bls.n	8000be2 <dht22_read+0xa6>
    for (uint8_t i = 0; i < 5; i++) {
 8000c7a:	7cfb      	ldrb	r3, [r7, #19]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	74fb      	strb	r3, [r7, #19]
 8000c80:	7cfb      	ldrb	r3, [r7, #19]
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d9aa      	bls.n	8000bdc <dht22_read+0xa0>
        }
    }

    // CRC
    if (data[4] != ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) return 1;
 8000c86:	7b3b      	ldrb	r3, [r7, #12]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	7a3b      	ldrb	r3, [r7, #8]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	7a7b      	ldrb	r3, [r7, #9]
 8000c90:	440b      	add	r3, r1
 8000c92:	7ab9      	ldrb	r1, [r7, #10]
 8000c94:	440b      	add	r3, r1
 8000c96:	7af9      	ldrb	r1, [r7, #11]
 8000c98:	440b      	add	r3, r1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d001      	beq.n	8000ca4 <dht22_read+0x168>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e030      	b.n	8000d06 <dht22_read+0x1ca>

    *humidity = ((data[0] << 8) | data[1]) * 0.1f;
 8000ca4:	7a3b      	ldrb	r3, [r7, #8]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	7a7a      	ldrb	r2, [r7, #9]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd77 	bl	80007a0 <__aeabi_i2f>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4917      	ldr	r1, [pc, #92]	@ (8000d14 <dht22_read+0x1d8>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fa48 	bl	800014c <__aeabi_fmul>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	601a      	str	r2, [r3, #0]
    int16_t temp_raw = ((data[2] & 0x7F) << 8) | data[3];
 8000cc4:	7abb      	ldrb	r3, [r7, #10]
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	823b      	strh	r3, [r7, #16]
    if (data[2] & 0x80) temp_raw = -temp_raw;
 8000cd8:	7abb      	ldrb	r3, [r7, #10]
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	da03      	bge.n	8000ce8 <dht22_read+0x1ac>
 8000ce0:	8a3b      	ldrh	r3, [r7, #16]
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	823b      	strh	r3, [r7, #16]
    *temperature = temp_raw * 0.1f;
 8000ce8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fd57 	bl	80007a0 <__aeabi_i2f>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4907      	ldr	r1, [pc, #28]	@ (8000d14 <dht22_read+0x1d8>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fa28 	bl	800014c <__aeabi_fmul>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	601a      	str	r2, [r3, #0]

    return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	3dcccccd 	.word	0x3dcccccd

08000d18 <main>:

// ==== MAIN ====
int main(void) {
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b096      	sub	sp, #88	@ 0x58
 8000d1c:	af02      	add	r7, sp, #8
    SystemInit72MHz();
 8000d1e:	f7ff fe4f 	bl	80009c0 <SystemInit72MHz>
    uart_init();
 8000d22:	f7ff fe07 	bl	8000934 <uart_init>
    timer_init();
 8000d26:	f7ff fe89 	bl	8000a3c <timer_init>

    // Khởi tạo chân Relay
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e14 <main+0xfc>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a39      	ldr	r2, [pc, #228]	@ (8000e14 <main+0xfc>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6193      	str	r3, [r2, #24]
    GPIOB->CRH &= ~(0xF << 0);    // PB8
 8000d36:	4b38      	ldr	r3, [pc, #224]	@ (8000e18 <main+0x100>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <main+0x100>)
 8000d3c:	f023 030f 	bic.w	r3, r3, #15
 8000d40:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x3 << 0);     // PB8 output push-pull
 8000d42:	4b35      	ldr	r3, [pc, #212]	@ (8000e18 <main+0x100>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	4a34      	ldr	r2, [pc, #208]	@ (8000e18 <main+0x100>)
 8000d48:	f043 0303 	orr.w	r3, r3, #3
 8000d4c:	6053      	str	r3, [r2, #4]
    GPIOB->ODR &= ~(1 << RELAY_PIN); // Relay OFF ban đầu
 8000d4e:	4b32      	ldr	r3, [pc, #200]	@ (8000e18 <main+0x100>)
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	4a31      	ldr	r2, [pc, #196]	@ (8000e18 <main+0x100>)
 8000d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d58:	60d3      	str	r3, [r2, #12]

    uart_send("Khoi dong OK (DHT22 + Relay Fan)\r\n");
 8000d5a:	4830      	ldr	r0, [pc, #192]	@ (8000e1c <main+0x104>)
 8000d5c:	f7ff fe12 	bl	8000984 <uart_send>

    float temp = 0, humi = 0;
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	647b      	str	r3, [r7, #68]	@ 0x44
    char buffer[64];

    while (1) {
        uint8_t dht_ok = dht22_read(&temp, &humi);
 8000d6c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000d70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fee0 	bl	8000b3c <dht22_read>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        if (dht_ok == 0) {
 8000d82:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d13b      	bne.n	8000e02 <main+0xea>
            sprintf(buffer, "Nhiet do: %.1f C, Do am: %.1f%%\r\n", temp, humi);
 8000d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fbf5 	bl	800057c <__aeabi_f2d>
 8000d92:	4604      	mov	r4, r0
 8000d94:	460d      	mov	r5, r1
 8000d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fbef 	bl	800057c <__aeabi_f2d>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	1d38      	adds	r0, r7, #4
 8000da4:	e9cd 2300 	strd	r2, r3, [sp]
 8000da8:	4622      	mov	r2, r4
 8000daa:	462b      	mov	r3, r5
 8000dac:	491c      	ldr	r1, [pc, #112]	@ (8000e20 <main+0x108>)
 8000dae:	f000 f8e3 	bl	8000f78 <siprintf>
            uart_send(buffer);
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fde5 	bl	8000984 <uart_send>

            if (temp > 20.0f) {
 8000dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dbc:	4919      	ldr	r1, [pc, #100]	@ (8000e24 <main+0x10c>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fdae 	bl	8000920 <__aeabi_fcmpgt>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d009      	beq.n	8000dde <main+0xc6>
                uart_send("BAT QUAT (Relay ON)\r\n");
 8000dca:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <main+0x110>)
 8000dcc:	f7ff fdda 	bl	8000984 <uart_send>
                GPIOB->ODR |= (1 << RELAY_PIN);
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <main+0x100>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	4a10      	ldr	r2, [pc, #64]	@ (8000e18 <main+0x100>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dda:	60d3      	str	r3, [r2, #12]
 8000ddc:	e014      	b.n	8000e08 <main+0xf0>
            } else if (temp < 17.0f) {
 8000dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000de0:	4912      	ldr	r1, [pc, #72]	@ (8000e2c <main+0x114>)
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fd7e 	bl	80008e4 <__aeabi_fcmplt>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00c      	beq.n	8000e08 <main+0xf0>
                uart_send("TAT QUAT (Relay OFF)\r\n");
 8000dee:	4810      	ldr	r0, [pc, #64]	@ (8000e30 <main+0x118>)
 8000df0:	f7ff fdc8 	bl	8000984 <uart_send>
                GPIOB->ODR &= ~(1 << RELAY_PIN);
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <main+0x100>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <main+0x100>)
 8000dfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dfe:	60d3      	str	r3, [r2, #12]
 8000e00:	e002      	b.n	8000e08 <main+0xf0>
            }
        } else {
            uart_send("Doc DHT22 that bai!\r\n");
 8000e02:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <main+0x11c>)
 8000e04:	f7ff fdbe 	bl	8000984 <uart_send>
        }

        delay_ms(2000);
 8000e08:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e0c:	f7ff fe4b 	bl	8000aa6 <delay_ms>
    while (1) {
 8000e10:	e7ac      	b.n	8000d6c <main+0x54>
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	080018e0 	.word	0x080018e0
 8000e20:	08001904 	.word	0x08001904
 8000e24:	41a00000 	.word	0x41a00000
 8000e28:	08001928 	.word	0x08001928
 8000e2c:	41880000 	.word	0x41880000
 8000e30:	08001940 	.word	0x08001940
 8000e34:	08001958 	.word	0x08001958

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <NMI_Handler+0x4>

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f864 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f000 f87a 	bl	8000fb8 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20005000 	.word	0x20005000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	20000070 	.word	0x20000070
 8000ef8:	200001c0 	.word	0x200001c0

08000efc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f08:	f7ff fff8 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480b      	ldr	r0, [pc, #44]	@ (8000f3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f0e:	490c      	ldr	r1, [pc, #48]	@ (8000f40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f10:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a09      	ldr	r2, [pc, #36]	@ (8000f48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f24:	4c09      	ldr	r4, [pc, #36]	@ (8000f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f32:	f000 f847 	bl	8000fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f36:	f7ff feef 	bl	8000d18 <main>
  bx lr
 8000f3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000f44:	080019ac 	.word	0x080019ac
  ldr r2, =_sbss
 8000f48:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000f4c:	200001c0 	.word	0x200001c0

08000f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_2_IRQHandler>
	...

08000f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_IncTick+0x1c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_IncTick+0x20>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a03      	ldr	r2, [pc, #12]	@ (8000f74 <HAL_IncTick+0x20>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000074 	.word	0x20000074

08000f78 <siprintf>:
 8000f78:	b40e      	push	{r1, r2, r3}
 8000f7a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000f7e:	b500      	push	{lr}
 8000f80:	b09c      	sub	sp, #112	@ 0x70
 8000f82:	ab1d      	add	r3, sp, #116	@ 0x74
 8000f84:	9002      	str	r0, [sp, #8]
 8000f86:	9006      	str	r0, [sp, #24]
 8000f88:	9107      	str	r1, [sp, #28]
 8000f8a:	9104      	str	r1, [sp, #16]
 8000f8c:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <siprintf+0x38>)
 8000f8e:	4909      	ldr	r1, [pc, #36]	@ (8000fb4 <siprintf+0x3c>)
 8000f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f94:	9105      	str	r1, [sp, #20]
 8000f96:	6800      	ldr	r0, [r0, #0]
 8000f98:	a902      	add	r1, sp, #8
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	f000 f98a 	bl	80012b4 <_svfiprintf_r>
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	9b02      	ldr	r3, [sp, #8]
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	b01c      	add	sp, #112	@ 0x70
 8000fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000fac:	b003      	add	sp, #12
 8000fae:	4770      	bx	lr
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	ffff0208 	.word	0xffff0208

08000fb8 <__errno>:
 8000fb8:	4b01      	ldr	r3, [pc, #4]	@ (8000fc0 <__errno+0x8>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <__libc_init_array>:
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	2600      	movs	r6, #0
 8000fc8:	4d0c      	ldr	r5, [pc, #48]	@ (8000ffc <__libc_init_array+0x38>)
 8000fca:	4c0d      	ldr	r4, [pc, #52]	@ (8001000 <__libc_init_array+0x3c>)
 8000fcc:	1b64      	subs	r4, r4, r5
 8000fce:	10a4      	asrs	r4, r4, #2
 8000fd0:	42a6      	cmp	r6, r4
 8000fd2:	d109      	bne.n	8000fe8 <__libc_init_array+0x24>
 8000fd4:	f000 fc78 	bl	80018c8 <_init>
 8000fd8:	2600      	movs	r6, #0
 8000fda:	4d0a      	ldr	r5, [pc, #40]	@ (8001004 <__libc_init_array+0x40>)
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <__libc_init_array+0x44>)
 8000fde:	1b64      	subs	r4, r4, r5
 8000fe0:	10a4      	asrs	r4, r4, #2
 8000fe2:	42a6      	cmp	r6, r4
 8000fe4:	d105      	bne.n	8000ff2 <__libc_init_array+0x2e>
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
 8000fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fec:	4798      	blx	r3
 8000fee:	3601      	adds	r6, #1
 8000ff0:	e7ee      	b.n	8000fd0 <__libc_init_array+0xc>
 8000ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff6:	4798      	blx	r3
 8000ff8:	3601      	adds	r6, #1
 8000ffa:	e7f2      	b.n	8000fe2 <__libc_init_array+0x1e>
 8000ffc:	080019a4 	.word	0x080019a4
 8001000:	080019a4 	.word	0x080019a4
 8001004:	080019a4 	.word	0x080019a4
 8001008:	080019a8 	.word	0x080019a8

0800100c <__retarget_lock_acquire_recursive>:
 800100c:	4770      	bx	lr

0800100e <__retarget_lock_release_recursive>:
 800100e:	4770      	bx	lr

08001010 <_free_r>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4605      	mov	r5, r0
 8001014:	2900      	cmp	r1, #0
 8001016:	d040      	beq.n	800109a <_free_r+0x8a>
 8001018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800101c:	1f0c      	subs	r4, r1, #4
 800101e:	2b00      	cmp	r3, #0
 8001020:	bfb8      	it	lt
 8001022:	18e4      	addlt	r4, r4, r3
 8001024:	f000 f8de 	bl	80011e4 <__malloc_lock>
 8001028:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <_free_r+0x8c>)
 800102a:	6813      	ldr	r3, [r2, #0]
 800102c:	b933      	cbnz	r3, 800103c <_free_r+0x2c>
 800102e:	6063      	str	r3, [r4, #4]
 8001030:	6014      	str	r4, [r2, #0]
 8001032:	4628      	mov	r0, r5
 8001034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001038:	f000 b8da 	b.w	80011f0 <__malloc_unlock>
 800103c:	42a3      	cmp	r3, r4
 800103e:	d908      	bls.n	8001052 <_free_r+0x42>
 8001040:	6820      	ldr	r0, [r4, #0]
 8001042:	1821      	adds	r1, r4, r0
 8001044:	428b      	cmp	r3, r1
 8001046:	bf01      	itttt	eq
 8001048:	6819      	ldreq	r1, [r3, #0]
 800104a:	685b      	ldreq	r3, [r3, #4]
 800104c:	1809      	addeq	r1, r1, r0
 800104e:	6021      	streq	r1, [r4, #0]
 8001050:	e7ed      	b.n	800102e <_free_r+0x1e>
 8001052:	461a      	mov	r2, r3
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	b10b      	cbz	r3, 800105c <_free_r+0x4c>
 8001058:	42a3      	cmp	r3, r4
 800105a:	d9fa      	bls.n	8001052 <_free_r+0x42>
 800105c:	6811      	ldr	r1, [r2, #0]
 800105e:	1850      	adds	r0, r2, r1
 8001060:	42a0      	cmp	r0, r4
 8001062:	d10b      	bne.n	800107c <_free_r+0x6c>
 8001064:	6820      	ldr	r0, [r4, #0]
 8001066:	4401      	add	r1, r0
 8001068:	1850      	adds	r0, r2, r1
 800106a:	4283      	cmp	r3, r0
 800106c:	6011      	str	r1, [r2, #0]
 800106e:	d1e0      	bne.n	8001032 <_free_r+0x22>
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4408      	add	r0, r1
 8001076:	6010      	str	r0, [r2, #0]
 8001078:	6053      	str	r3, [r2, #4]
 800107a:	e7da      	b.n	8001032 <_free_r+0x22>
 800107c:	d902      	bls.n	8001084 <_free_r+0x74>
 800107e:	230c      	movs	r3, #12
 8001080:	602b      	str	r3, [r5, #0]
 8001082:	e7d6      	b.n	8001032 <_free_r+0x22>
 8001084:	6820      	ldr	r0, [r4, #0]
 8001086:	1821      	adds	r1, r4, r0
 8001088:	428b      	cmp	r3, r1
 800108a:	bf01      	itttt	eq
 800108c:	6819      	ldreq	r1, [r3, #0]
 800108e:	685b      	ldreq	r3, [r3, #4]
 8001090:	1809      	addeq	r1, r1, r0
 8001092:	6021      	streq	r1, [r4, #0]
 8001094:	6063      	str	r3, [r4, #4]
 8001096:	6054      	str	r4, [r2, #4]
 8001098:	e7cb      	b.n	8001032 <_free_r+0x22>
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	200001bc 	.word	0x200001bc

080010a0 <sbrk_aligned>:
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	4e0f      	ldr	r6, [pc, #60]	@ (80010e0 <sbrk_aligned+0x40>)
 80010a4:	460c      	mov	r4, r1
 80010a6:	6831      	ldr	r1, [r6, #0]
 80010a8:	4605      	mov	r5, r0
 80010aa:	b911      	cbnz	r1, 80010b2 <sbrk_aligned+0x12>
 80010ac:	f000 fbaa 	bl	8001804 <_sbrk_r>
 80010b0:	6030      	str	r0, [r6, #0]
 80010b2:	4621      	mov	r1, r4
 80010b4:	4628      	mov	r0, r5
 80010b6:	f000 fba5 	bl	8001804 <_sbrk_r>
 80010ba:	1c43      	adds	r3, r0, #1
 80010bc:	d103      	bne.n	80010c6 <sbrk_aligned+0x26>
 80010be:	f04f 34ff 	mov.w	r4, #4294967295
 80010c2:	4620      	mov	r0, r4
 80010c4:	bd70      	pop	{r4, r5, r6, pc}
 80010c6:	1cc4      	adds	r4, r0, #3
 80010c8:	f024 0403 	bic.w	r4, r4, #3
 80010cc:	42a0      	cmp	r0, r4
 80010ce:	d0f8      	beq.n	80010c2 <sbrk_aligned+0x22>
 80010d0:	1a21      	subs	r1, r4, r0
 80010d2:	4628      	mov	r0, r5
 80010d4:	f000 fb96 	bl	8001804 <_sbrk_r>
 80010d8:	3001      	adds	r0, #1
 80010da:	d1f2      	bne.n	80010c2 <sbrk_aligned+0x22>
 80010dc:	e7ef      	b.n	80010be <sbrk_aligned+0x1e>
 80010de:	bf00      	nop
 80010e0:	200001b8 	.word	0x200001b8

080010e4 <_malloc_r>:
 80010e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010e8:	1ccd      	adds	r5, r1, #3
 80010ea:	f025 0503 	bic.w	r5, r5, #3
 80010ee:	3508      	adds	r5, #8
 80010f0:	2d0c      	cmp	r5, #12
 80010f2:	bf38      	it	cc
 80010f4:	250c      	movcc	r5, #12
 80010f6:	2d00      	cmp	r5, #0
 80010f8:	4606      	mov	r6, r0
 80010fa:	db01      	blt.n	8001100 <_malloc_r+0x1c>
 80010fc:	42a9      	cmp	r1, r5
 80010fe:	d904      	bls.n	800110a <_malloc_r+0x26>
 8001100:	230c      	movs	r3, #12
 8001102:	6033      	str	r3, [r6, #0]
 8001104:	2000      	movs	r0, #0
 8001106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800110a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80011e0 <_malloc_r+0xfc>
 800110e:	f000 f869 	bl	80011e4 <__malloc_lock>
 8001112:	f8d8 3000 	ldr.w	r3, [r8]
 8001116:	461c      	mov	r4, r3
 8001118:	bb44      	cbnz	r4, 800116c <_malloc_r+0x88>
 800111a:	4629      	mov	r1, r5
 800111c:	4630      	mov	r0, r6
 800111e:	f7ff ffbf 	bl	80010a0 <sbrk_aligned>
 8001122:	1c43      	adds	r3, r0, #1
 8001124:	4604      	mov	r4, r0
 8001126:	d158      	bne.n	80011da <_malloc_r+0xf6>
 8001128:	f8d8 4000 	ldr.w	r4, [r8]
 800112c:	4627      	mov	r7, r4
 800112e:	2f00      	cmp	r7, #0
 8001130:	d143      	bne.n	80011ba <_malloc_r+0xd6>
 8001132:	2c00      	cmp	r4, #0
 8001134:	d04b      	beq.n	80011ce <_malloc_r+0xea>
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	4639      	mov	r1, r7
 800113a:	4630      	mov	r0, r6
 800113c:	eb04 0903 	add.w	r9, r4, r3
 8001140:	f000 fb60 	bl	8001804 <_sbrk_r>
 8001144:	4581      	cmp	r9, r0
 8001146:	d142      	bne.n	80011ce <_malloc_r+0xea>
 8001148:	6821      	ldr	r1, [r4, #0]
 800114a:	4630      	mov	r0, r6
 800114c:	1a6d      	subs	r5, r5, r1
 800114e:	4629      	mov	r1, r5
 8001150:	f7ff ffa6 	bl	80010a0 <sbrk_aligned>
 8001154:	3001      	adds	r0, #1
 8001156:	d03a      	beq.n	80011ce <_malloc_r+0xea>
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	442b      	add	r3, r5
 800115c:	6023      	str	r3, [r4, #0]
 800115e:	f8d8 3000 	ldr.w	r3, [r8]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	bb62      	cbnz	r2, 80011c0 <_malloc_r+0xdc>
 8001166:	f8c8 7000 	str.w	r7, [r8]
 800116a:	e00f      	b.n	800118c <_malloc_r+0xa8>
 800116c:	6822      	ldr	r2, [r4, #0]
 800116e:	1b52      	subs	r2, r2, r5
 8001170:	d420      	bmi.n	80011b4 <_malloc_r+0xd0>
 8001172:	2a0b      	cmp	r2, #11
 8001174:	d917      	bls.n	80011a6 <_malloc_r+0xc2>
 8001176:	1961      	adds	r1, r4, r5
 8001178:	42a3      	cmp	r3, r4
 800117a:	6025      	str	r5, [r4, #0]
 800117c:	bf18      	it	ne
 800117e:	6059      	strne	r1, [r3, #4]
 8001180:	6863      	ldr	r3, [r4, #4]
 8001182:	bf08      	it	eq
 8001184:	f8c8 1000 	streq.w	r1, [r8]
 8001188:	5162      	str	r2, [r4, r5]
 800118a:	604b      	str	r3, [r1, #4]
 800118c:	4630      	mov	r0, r6
 800118e:	f000 f82f 	bl	80011f0 <__malloc_unlock>
 8001192:	f104 000b 	add.w	r0, r4, #11
 8001196:	1d23      	adds	r3, r4, #4
 8001198:	f020 0007 	bic.w	r0, r0, #7
 800119c:	1ac2      	subs	r2, r0, r3
 800119e:	bf1c      	itt	ne
 80011a0:	1a1b      	subne	r3, r3, r0
 80011a2:	50a3      	strne	r3, [r4, r2]
 80011a4:	e7af      	b.n	8001106 <_malloc_r+0x22>
 80011a6:	6862      	ldr	r2, [r4, #4]
 80011a8:	42a3      	cmp	r3, r4
 80011aa:	bf0c      	ite	eq
 80011ac:	f8c8 2000 	streq.w	r2, [r8]
 80011b0:	605a      	strne	r2, [r3, #4]
 80011b2:	e7eb      	b.n	800118c <_malloc_r+0xa8>
 80011b4:	4623      	mov	r3, r4
 80011b6:	6864      	ldr	r4, [r4, #4]
 80011b8:	e7ae      	b.n	8001118 <_malloc_r+0x34>
 80011ba:	463c      	mov	r4, r7
 80011bc:	687f      	ldr	r7, [r7, #4]
 80011be:	e7b6      	b.n	800112e <_malloc_r+0x4a>
 80011c0:	461a      	mov	r2, r3
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	42a3      	cmp	r3, r4
 80011c6:	d1fb      	bne.n	80011c0 <_malloc_r+0xdc>
 80011c8:	2300      	movs	r3, #0
 80011ca:	6053      	str	r3, [r2, #4]
 80011cc:	e7de      	b.n	800118c <_malloc_r+0xa8>
 80011ce:	230c      	movs	r3, #12
 80011d0:	4630      	mov	r0, r6
 80011d2:	6033      	str	r3, [r6, #0]
 80011d4:	f000 f80c 	bl	80011f0 <__malloc_unlock>
 80011d8:	e794      	b.n	8001104 <_malloc_r+0x20>
 80011da:	6005      	str	r5, [r0, #0]
 80011dc:	e7d6      	b.n	800118c <_malloc_r+0xa8>
 80011de:	bf00      	nop
 80011e0:	200001bc 	.word	0x200001bc

080011e4 <__malloc_lock>:
 80011e4:	4801      	ldr	r0, [pc, #4]	@ (80011ec <__malloc_lock+0x8>)
 80011e6:	f7ff bf11 	b.w	800100c <__retarget_lock_acquire_recursive>
 80011ea:	bf00      	nop
 80011ec:	200001b4 	.word	0x200001b4

080011f0 <__malloc_unlock>:
 80011f0:	4801      	ldr	r0, [pc, #4]	@ (80011f8 <__malloc_unlock+0x8>)
 80011f2:	f7ff bf0c 	b.w	800100e <__retarget_lock_release_recursive>
 80011f6:	bf00      	nop
 80011f8:	200001b4 	.word	0x200001b4

080011fc <__ssputs_r>:
 80011fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001200:	461f      	mov	r7, r3
 8001202:	688e      	ldr	r6, [r1, #8]
 8001204:	4682      	mov	sl, r0
 8001206:	42be      	cmp	r6, r7
 8001208:	460c      	mov	r4, r1
 800120a:	4690      	mov	r8, r2
 800120c:	680b      	ldr	r3, [r1, #0]
 800120e:	d82d      	bhi.n	800126c <__ssputs_r+0x70>
 8001210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001214:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001218:	d026      	beq.n	8001268 <__ssputs_r+0x6c>
 800121a:	6965      	ldr	r5, [r4, #20]
 800121c:	6909      	ldr	r1, [r1, #16]
 800121e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001222:	eba3 0901 	sub.w	r9, r3, r1
 8001226:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800122a:	1c7b      	adds	r3, r7, #1
 800122c:	444b      	add	r3, r9
 800122e:	106d      	asrs	r5, r5, #1
 8001230:	429d      	cmp	r5, r3
 8001232:	bf38      	it	cc
 8001234:	461d      	movcc	r5, r3
 8001236:	0553      	lsls	r3, r2, #21
 8001238:	d527      	bpl.n	800128a <__ssputs_r+0x8e>
 800123a:	4629      	mov	r1, r5
 800123c:	f7ff ff52 	bl	80010e4 <_malloc_r>
 8001240:	4606      	mov	r6, r0
 8001242:	b360      	cbz	r0, 800129e <__ssputs_r+0xa2>
 8001244:	464a      	mov	r2, r9
 8001246:	6921      	ldr	r1, [r4, #16]
 8001248:	f000 fafa 	bl	8001840 <memcpy>
 800124c:	89a3      	ldrh	r3, [r4, #12]
 800124e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001256:	81a3      	strh	r3, [r4, #12]
 8001258:	6126      	str	r6, [r4, #16]
 800125a:	444e      	add	r6, r9
 800125c:	6026      	str	r6, [r4, #0]
 800125e:	463e      	mov	r6, r7
 8001260:	6165      	str	r5, [r4, #20]
 8001262:	eba5 0509 	sub.w	r5, r5, r9
 8001266:	60a5      	str	r5, [r4, #8]
 8001268:	42be      	cmp	r6, r7
 800126a:	d900      	bls.n	800126e <__ssputs_r+0x72>
 800126c:	463e      	mov	r6, r7
 800126e:	4632      	mov	r2, r6
 8001270:	4641      	mov	r1, r8
 8001272:	6820      	ldr	r0, [r4, #0]
 8001274:	f000 faac 	bl	80017d0 <memmove>
 8001278:	2000      	movs	r0, #0
 800127a:	68a3      	ldr	r3, [r4, #8]
 800127c:	1b9b      	subs	r3, r3, r6
 800127e:	60a3      	str	r3, [r4, #8]
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	4433      	add	r3, r6
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800128a:	462a      	mov	r2, r5
 800128c:	f000 fae6 	bl	800185c <_realloc_r>
 8001290:	4606      	mov	r6, r0
 8001292:	2800      	cmp	r0, #0
 8001294:	d1e0      	bne.n	8001258 <__ssputs_r+0x5c>
 8001296:	4650      	mov	r0, sl
 8001298:	6921      	ldr	r1, [r4, #16]
 800129a:	f7ff feb9 	bl	8001010 <_free_r>
 800129e:	230c      	movs	r3, #12
 80012a0:	f8ca 3000 	str.w	r3, [sl]
 80012a4:	89a3      	ldrh	r3, [r4, #12]
 80012a6:	f04f 30ff 	mov.w	r0, #4294967295
 80012aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ae:	81a3      	strh	r3, [r4, #12]
 80012b0:	e7e9      	b.n	8001286 <__ssputs_r+0x8a>
	...

080012b4 <_svfiprintf_r>:
 80012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b8:	4698      	mov	r8, r3
 80012ba:	898b      	ldrh	r3, [r1, #12]
 80012bc:	4607      	mov	r7, r0
 80012be:	061b      	lsls	r3, r3, #24
 80012c0:	460d      	mov	r5, r1
 80012c2:	4614      	mov	r4, r2
 80012c4:	b09d      	sub	sp, #116	@ 0x74
 80012c6:	d510      	bpl.n	80012ea <_svfiprintf_r+0x36>
 80012c8:	690b      	ldr	r3, [r1, #16]
 80012ca:	b973      	cbnz	r3, 80012ea <_svfiprintf_r+0x36>
 80012cc:	2140      	movs	r1, #64	@ 0x40
 80012ce:	f7ff ff09 	bl	80010e4 <_malloc_r>
 80012d2:	6028      	str	r0, [r5, #0]
 80012d4:	6128      	str	r0, [r5, #16]
 80012d6:	b930      	cbnz	r0, 80012e6 <_svfiprintf_r+0x32>
 80012d8:	230c      	movs	r3, #12
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	b01d      	add	sp, #116	@ 0x74
 80012e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012e6:	2340      	movs	r3, #64	@ 0x40
 80012e8:	616b      	str	r3, [r5, #20]
 80012ea:	2300      	movs	r3, #0
 80012ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80012ee:	2320      	movs	r3, #32
 80012f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80012f4:	2330      	movs	r3, #48	@ 0x30
 80012f6:	f04f 0901 	mov.w	r9, #1
 80012fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80012fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001498 <_svfiprintf_r+0x1e4>
 8001302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001306:	4623      	mov	r3, r4
 8001308:	469a      	mov	sl, r3
 800130a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800130e:	b10a      	cbz	r2, 8001314 <_svfiprintf_r+0x60>
 8001310:	2a25      	cmp	r2, #37	@ 0x25
 8001312:	d1f9      	bne.n	8001308 <_svfiprintf_r+0x54>
 8001314:	ebba 0b04 	subs.w	fp, sl, r4
 8001318:	d00b      	beq.n	8001332 <_svfiprintf_r+0x7e>
 800131a:	465b      	mov	r3, fp
 800131c:	4622      	mov	r2, r4
 800131e:	4629      	mov	r1, r5
 8001320:	4638      	mov	r0, r7
 8001322:	f7ff ff6b 	bl	80011fc <__ssputs_r>
 8001326:	3001      	adds	r0, #1
 8001328:	f000 80a7 	beq.w	800147a <_svfiprintf_r+0x1c6>
 800132c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800132e:	445a      	add	r2, fp
 8001330:	9209      	str	r2, [sp, #36]	@ 0x24
 8001332:	f89a 3000 	ldrb.w	r3, [sl]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 809f 	beq.w	800147a <_svfiprintf_r+0x1c6>
 800133c:	2300      	movs	r3, #0
 800133e:	f04f 32ff 	mov.w	r2, #4294967295
 8001342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001346:	f10a 0a01 	add.w	sl, sl, #1
 800134a:	9304      	str	r3, [sp, #16]
 800134c:	9307      	str	r3, [sp, #28]
 800134e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001352:	931a      	str	r3, [sp, #104]	@ 0x68
 8001354:	4654      	mov	r4, sl
 8001356:	2205      	movs	r2, #5
 8001358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800135c:	484e      	ldr	r0, [pc, #312]	@ (8001498 <_svfiprintf_r+0x1e4>)
 800135e:	f000 fa61 	bl	8001824 <memchr>
 8001362:	9a04      	ldr	r2, [sp, #16]
 8001364:	b9d8      	cbnz	r0, 800139e <_svfiprintf_r+0xea>
 8001366:	06d0      	lsls	r0, r2, #27
 8001368:	bf44      	itt	mi
 800136a:	2320      	movmi	r3, #32
 800136c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001370:	0711      	lsls	r1, r2, #28
 8001372:	bf44      	itt	mi
 8001374:	232b      	movmi	r3, #43	@ 0x2b
 8001376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800137a:	f89a 3000 	ldrb.w	r3, [sl]
 800137e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001380:	d015      	beq.n	80013ae <_svfiprintf_r+0xfa>
 8001382:	4654      	mov	r4, sl
 8001384:	2000      	movs	r0, #0
 8001386:	f04f 0c0a 	mov.w	ip, #10
 800138a:	9a07      	ldr	r2, [sp, #28]
 800138c:	4621      	mov	r1, r4
 800138e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001392:	3b30      	subs	r3, #48	@ 0x30
 8001394:	2b09      	cmp	r3, #9
 8001396:	d94b      	bls.n	8001430 <_svfiprintf_r+0x17c>
 8001398:	b1b0      	cbz	r0, 80013c8 <_svfiprintf_r+0x114>
 800139a:	9207      	str	r2, [sp, #28]
 800139c:	e014      	b.n	80013c8 <_svfiprintf_r+0x114>
 800139e:	eba0 0308 	sub.w	r3, r0, r8
 80013a2:	fa09 f303 	lsl.w	r3, r9, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	46a2      	mov	sl, r4
 80013aa:	9304      	str	r3, [sp, #16]
 80013ac:	e7d2      	b.n	8001354 <_svfiprintf_r+0xa0>
 80013ae:	9b03      	ldr	r3, [sp, #12]
 80013b0:	1d19      	adds	r1, r3, #4
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	9103      	str	r1, [sp, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bfbb      	ittet	lt
 80013ba:	425b      	neglt	r3, r3
 80013bc:	f042 0202 	orrlt.w	r2, r2, #2
 80013c0:	9307      	strge	r3, [sp, #28]
 80013c2:	9307      	strlt	r3, [sp, #28]
 80013c4:	bfb8      	it	lt
 80013c6:	9204      	strlt	r2, [sp, #16]
 80013c8:	7823      	ldrb	r3, [r4, #0]
 80013ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80013cc:	d10a      	bne.n	80013e4 <_svfiprintf_r+0x130>
 80013ce:	7863      	ldrb	r3, [r4, #1]
 80013d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80013d2:	d132      	bne.n	800143a <_svfiprintf_r+0x186>
 80013d4:	9b03      	ldr	r3, [sp, #12]
 80013d6:	3402      	adds	r4, #2
 80013d8:	1d1a      	adds	r2, r3, #4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	9203      	str	r2, [sp, #12]
 80013de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80013e2:	9305      	str	r3, [sp, #20]
 80013e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800149c <_svfiprintf_r+0x1e8>
 80013e8:	2203      	movs	r2, #3
 80013ea:	4650      	mov	r0, sl
 80013ec:	7821      	ldrb	r1, [r4, #0]
 80013ee:	f000 fa19 	bl	8001824 <memchr>
 80013f2:	b138      	cbz	r0, 8001404 <_svfiprintf_r+0x150>
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	9b04      	ldr	r3, [sp, #16]
 80013f8:	eba0 000a 	sub.w	r0, r0, sl
 80013fc:	4082      	lsls	r2, r0
 80013fe:	4313      	orrs	r3, r2
 8001400:	3401      	adds	r4, #1
 8001402:	9304      	str	r3, [sp, #16]
 8001404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001408:	2206      	movs	r2, #6
 800140a:	4825      	ldr	r0, [pc, #148]	@ (80014a0 <_svfiprintf_r+0x1ec>)
 800140c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001410:	f000 fa08 	bl	8001824 <memchr>
 8001414:	2800      	cmp	r0, #0
 8001416:	d036      	beq.n	8001486 <_svfiprintf_r+0x1d2>
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <_svfiprintf_r+0x1f0>)
 800141a:	bb1b      	cbnz	r3, 8001464 <_svfiprintf_r+0x1b0>
 800141c:	9b03      	ldr	r3, [sp, #12]
 800141e:	3307      	adds	r3, #7
 8001420:	f023 0307 	bic.w	r3, r3, #7
 8001424:	3308      	adds	r3, #8
 8001426:	9303      	str	r3, [sp, #12]
 8001428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800142a:	4433      	add	r3, r6
 800142c:	9309      	str	r3, [sp, #36]	@ 0x24
 800142e:	e76a      	b.n	8001306 <_svfiprintf_r+0x52>
 8001430:	460c      	mov	r4, r1
 8001432:	2001      	movs	r0, #1
 8001434:	fb0c 3202 	mla	r2, ip, r2, r3
 8001438:	e7a8      	b.n	800138c <_svfiprintf_r+0xd8>
 800143a:	2300      	movs	r3, #0
 800143c:	f04f 0c0a 	mov.w	ip, #10
 8001440:	4619      	mov	r1, r3
 8001442:	3401      	adds	r4, #1
 8001444:	9305      	str	r3, [sp, #20]
 8001446:	4620      	mov	r0, r4
 8001448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800144c:	3a30      	subs	r2, #48	@ 0x30
 800144e:	2a09      	cmp	r2, #9
 8001450:	d903      	bls.n	800145a <_svfiprintf_r+0x1a6>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0c6      	beq.n	80013e4 <_svfiprintf_r+0x130>
 8001456:	9105      	str	r1, [sp, #20]
 8001458:	e7c4      	b.n	80013e4 <_svfiprintf_r+0x130>
 800145a:	4604      	mov	r4, r0
 800145c:	2301      	movs	r3, #1
 800145e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001462:	e7f0      	b.n	8001446 <_svfiprintf_r+0x192>
 8001464:	ab03      	add	r3, sp, #12
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	462a      	mov	r2, r5
 800146a:	4638      	mov	r0, r7
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <_svfiprintf_r+0x1f4>)
 800146e:	a904      	add	r1, sp, #16
 8001470:	f3af 8000 	nop.w
 8001474:	1c42      	adds	r2, r0, #1
 8001476:	4606      	mov	r6, r0
 8001478:	d1d6      	bne.n	8001428 <_svfiprintf_r+0x174>
 800147a:	89ab      	ldrh	r3, [r5, #12]
 800147c:	065b      	lsls	r3, r3, #25
 800147e:	f53f af2d 	bmi.w	80012dc <_svfiprintf_r+0x28>
 8001482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001484:	e72c      	b.n	80012e0 <_svfiprintf_r+0x2c>
 8001486:	ab03      	add	r3, sp, #12
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	462a      	mov	r2, r5
 800148c:	4638      	mov	r0, r7
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <_svfiprintf_r+0x1f4>)
 8001490:	a904      	add	r1, sp, #16
 8001492:	f000 f87d 	bl	8001590 <_printf_i>
 8001496:	e7ed      	b.n	8001474 <_svfiprintf_r+0x1c0>
 8001498:	0800196e 	.word	0x0800196e
 800149c:	08001974 	.word	0x08001974
 80014a0:	08001978 	.word	0x08001978
 80014a4:	00000000 	.word	0x00000000
 80014a8:	080011fd 	.word	0x080011fd

080014ac <_printf_common>:
 80014ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b0:	4616      	mov	r6, r2
 80014b2:	4698      	mov	r8, r3
 80014b4:	688a      	ldr	r2, [r1, #8]
 80014b6:	690b      	ldr	r3, [r1, #16]
 80014b8:	4607      	mov	r7, r0
 80014ba:	4293      	cmp	r3, r2
 80014bc:	bfb8      	it	lt
 80014be:	4613      	movlt	r3, r2
 80014c0:	6033      	str	r3, [r6, #0]
 80014c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80014c6:	460c      	mov	r4, r1
 80014c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80014cc:	b10a      	cbz	r2, 80014d2 <_printf_common+0x26>
 80014ce:	3301      	adds	r3, #1
 80014d0:	6033      	str	r3, [r6, #0]
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	0699      	lsls	r1, r3, #26
 80014d6:	bf42      	ittt	mi
 80014d8:	6833      	ldrmi	r3, [r6, #0]
 80014da:	3302      	addmi	r3, #2
 80014dc:	6033      	strmi	r3, [r6, #0]
 80014de:	6825      	ldr	r5, [r4, #0]
 80014e0:	f015 0506 	ands.w	r5, r5, #6
 80014e4:	d106      	bne.n	80014f4 <_printf_common+0x48>
 80014e6:	f104 0a19 	add.w	sl, r4, #25
 80014ea:	68e3      	ldr	r3, [r4, #12]
 80014ec:	6832      	ldr	r2, [r6, #0]
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	42ab      	cmp	r3, r5
 80014f2:	dc2b      	bgt.n	800154c <_printf_common+0xa0>
 80014f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80014f8:	6822      	ldr	r2, [r4, #0]
 80014fa:	3b00      	subs	r3, #0
 80014fc:	bf18      	it	ne
 80014fe:	2301      	movne	r3, #1
 8001500:	0692      	lsls	r2, r2, #26
 8001502:	d430      	bmi.n	8001566 <_printf_common+0xba>
 8001504:	4641      	mov	r1, r8
 8001506:	4638      	mov	r0, r7
 8001508:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800150c:	47c8      	blx	r9
 800150e:	3001      	adds	r0, #1
 8001510:	d023      	beq.n	800155a <_printf_common+0xae>
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	6922      	ldr	r2, [r4, #16]
 8001516:	f003 0306 	and.w	r3, r3, #6
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf14      	ite	ne
 800151e:	2500      	movne	r5, #0
 8001520:	6833      	ldreq	r3, [r6, #0]
 8001522:	f04f 0600 	mov.w	r6, #0
 8001526:	bf08      	it	eq
 8001528:	68e5      	ldreq	r5, [r4, #12]
 800152a:	f104 041a 	add.w	r4, r4, #26
 800152e:	bf08      	it	eq
 8001530:	1aed      	subeq	r5, r5, r3
 8001532:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001536:	bf08      	it	eq
 8001538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800153c:	4293      	cmp	r3, r2
 800153e:	bfc4      	itt	gt
 8001540:	1a9b      	subgt	r3, r3, r2
 8001542:	18ed      	addgt	r5, r5, r3
 8001544:	42b5      	cmp	r5, r6
 8001546:	d11a      	bne.n	800157e <_printf_common+0xd2>
 8001548:	2000      	movs	r0, #0
 800154a:	e008      	b.n	800155e <_printf_common+0xb2>
 800154c:	2301      	movs	r3, #1
 800154e:	4652      	mov	r2, sl
 8001550:	4641      	mov	r1, r8
 8001552:	4638      	mov	r0, r7
 8001554:	47c8      	blx	r9
 8001556:	3001      	adds	r0, #1
 8001558:	d103      	bne.n	8001562 <_printf_common+0xb6>
 800155a:	f04f 30ff 	mov.w	r0, #4294967295
 800155e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001562:	3501      	adds	r5, #1
 8001564:	e7c1      	b.n	80014ea <_printf_common+0x3e>
 8001566:	2030      	movs	r0, #48	@ 0x30
 8001568:	18e1      	adds	r1, r4, r3
 800156a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001574:	4422      	add	r2, r4
 8001576:	3302      	adds	r3, #2
 8001578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800157c:	e7c2      	b.n	8001504 <_printf_common+0x58>
 800157e:	2301      	movs	r3, #1
 8001580:	4622      	mov	r2, r4
 8001582:	4641      	mov	r1, r8
 8001584:	4638      	mov	r0, r7
 8001586:	47c8      	blx	r9
 8001588:	3001      	adds	r0, #1
 800158a:	d0e6      	beq.n	800155a <_printf_common+0xae>
 800158c:	3601      	adds	r6, #1
 800158e:	e7d9      	b.n	8001544 <_printf_common+0x98>

08001590 <_printf_i>:
 8001590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001594:	7e0f      	ldrb	r7, [r1, #24]
 8001596:	4691      	mov	r9, r2
 8001598:	2f78      	cmp	r7, #120	@ 0x78
 800159a:	4680      	mov	r8, r0
 800159c:	460c      	mov	r4, r1
 800159e:	469a      	mov	sl, r3
 80015a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80015a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80015a6:	d807      	bhi.n	80015b8 <_printf_i+0x28>
 80015a8:	2f62      	cmp	r7, #98	@ 0x62
 80015aa:	d80a      	bhi.n	80015c2 <_printf_i+0x32>
 80015ac:	2f00      	cmp	r7, #0
 80015ae:	f000 80d3 	beq.w	8001758 <_printf_i+0x1c8>
 80015b2:	2f58      	cmp	r7, #88	@ 0x58
 80015b4:	f000 80ba 	beq.w	800172c <_printf_i+0x19c>
 80015b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80015bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80015c0:	e03a      	b.n	8001638 <_printf_i+0xa8>
 80015c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80015c6:	2b15      	cmp	r3, #21
 80015c8:	d8f6      	bhi.n	80015b8 <_printf_i+0x28>
 80015ca:	a101      	add	r1, pc, #4	@ (adr r1, 80015d0 <_printf_i+0x40>)
 80015cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80015d0:	08001629 	.word	0x08001629
 80015d4:	0800163d 	.word	0x0800163d
 80015d8:	080015b9 	.word	0x080015b9
 80015dc:	080015b9 	.word	0x080015b9
 80015e0:	080015b9 	.word	0x080015b9
 80015e4:	080015b9 	.word	0x080015b9
 80015e8:	0800163d 	.word	0x0800163d
 80015ec:	080015b9 	.word	0x080015b9
 80015f0:	080015b9 	.word	0x080015b9
 80015f4:	080015b9 	.word	0x080015b9
 80015f8:	080015b9 	.word	0x080015b9
 80015fc:	0800173f 	.word	0x0800173f
 8001600:	08001667 	.word	0x08001667
 8001604:	080016f9 	.word	0x080016f9
 8001608:	080015b9 	.word	0x080015b9
 800160c:	080015b9 	.word	0x080015b9
 8001610:	08001761 	.word	0x08001761
 8001614:	080015b9 	.word	0x080015b9
 8001618:	08001667 	.word	0x08001667
 800161c:	080015b9 	.word	0x080015b9
 8001620:	080015b9 	.word	0x080015b9
 8001624:	08001701 	.word	0x08001701
 8001628:	6833      	ldr	r3, [r6, #0]
 800162a:	1d1a      	adds	r2, r3, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6032      	str	r2, [r6, #0]
 8001630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001638:	2301      	movs	r3, #1
 800163a:	e09e      	b.n	800177a <_printf_i+0x1ea>
 800163c:	6833      	ldr	r3, [r6, #0]
 800163e:	6820      	ldr	r0, [r4, #0]
 8001640:	1d19      	adds	r1, r3, #4
 8001642:	6031      	str	r1, [r6, #0]
 8001644:	0606      	lsls	r6, r0, #24
 8001646:	d501      	bpl.n	800164c <_printf_i+0xbc>
 8001648:	681d      	ldr	r5, [r3, #0]
 800164a:	e003      	b.n	8001654 <_printf_i+0xc4>
 800164c:	0645      	lsls	r5, r0, #25
 800164e:	d5fb      	bpl.n	8001648 <_printf_i+0xb8>
 8001650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001654:	2d00      	cmp	r5, #0
 8001656:	da03      	bge.n	8001660 <_printf_i+0xd0>
 8001658:	232d      	movs	r3, #45	@ 0x2d
 800165a:	426d      	negs	r5, r5
 800165c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001660:	230a      	movs	r3, #10
 8001662:	4859      	ldr	r0, [pc, #356]	@ (80017c8 <_printf_i+0x238>)
 8001664:	e011      	b.n	800168a <_printf_i+0xfa>
 8001666:	6821      	ldr	r1, [r4, #0]
 8001668:	6833      	ldr	r3, [r6, #0]
 800166a:	0608      	lsls	r0, r1, #24
 800166c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001670:	d402      	bmi.n	8001678 <_printf_i+0xe8>
 8001672:	0649      	lsls	r1, r1, #25
 8001674:	bf48      	it	mi
 8001676:	b2ad      	uxthmi	r5, r5
 8001678:	2f6f      	cmp	r7, #111	@ 0x6f
 800167a:	6033      	str	r3, [r6, #0]
 800167c:	bf14      	ite	ne
 800167e:	230a      	movne	r3, #10
 8001680:	2308      	moveq	r3, #8
 8001682:	4851      	ldr	r0, [pc, #324]	@ (80017c8 <_printf_i+0x238>)
 8001684:	2100      	movs	r1, #0
 8001686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800168a:	6866      	ldr	r6, [r4, #4]
 800168c:	2e00      	cmp	r6, #0
 800168e:	bfa8      	it	ge
 8001690:	6821      	ldrge	r1, [r4, #0]
 8001692:	60a6      	str	r6, [r4, #8]
 8001694:	bfa4      	itt	ge
 8001696:	f021 0104 	bicge.w	r1, r1, #4
 800169a:	6021      	strge	r1, [r4, #0]
 800169c:	b90d      	cbnz	r5, 80016a2 <_printf_i+0x112>
 800169e:	2e00      	cmp	r6, #0
 80016a0:	d04b      	beq.n	800173a <_printf_i+0x1aa>
 80016a2:	4616      	mov	r6, r2
 80016a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80016a8:	fb03 5711 	mls	r7, r3, r1, r5
 80016ac:	5dc7      	ldrb	r7, [r0, r7]
 80016ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80016b2:	462f      	mov	r7, r5
 80016b4:	42bb      	cmp	r3, r7
 80016b6:	460d      	mov	r5, r1
 80016b8:	d9f4      	bls.n	80016a4 <_printf_i+0x114>
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d10b      	bne.n	80016d6 <_printf_i+0x146>
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	07df      	lsls	r7, r3, #31
 80016c2:	d508      	bpl.n	80016d6 <_printf_i+0x146>
 80016c4:	6923      	ldr	r3, [r4, #16]
 80016c6:	6861      	ldr	r1, [r4, #4]
 80016c8:	4299      	cmp	r1, r3
 80016ca:	bfde      	ittt	le
 80016cc:	2330      	movle	r3, #48	@ 0x30
 80016ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80016d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80016d6:	1b92      	subs	r2, r2, r6
 80016d8:	6122      	str	r2, [r4, #16]
 80016da:	464b      	mov	r3, r9
 80016dc:	4621      	mov	r1, r4
 80016de:	4640      	mov	r0, r8
 80016e0:	f8cd a000 	str.w	sl, [sp]
 80016e4:	aa03      	add	r2, sp, #12
 80016e6:	f7ff fee1 	bl	80014ac <_printf_common>
 80016ea:	3001      	adds	r0, #1
 80016ec:	d14a      	bne.n	8001784 <_printf_i+0x1f4>
 80016ee:	f04f 30ff 	mov.w	r0, #4294967295
 80016f2:	b004      	add	sp, #16
 80016f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	f043 0320 	orr.w	r3, r3, #32
 80016fe:	6023      	str	r3, [r4, #0]
 8001700:	2778      	movs	r7, #120	@ 0x78
 8001702:	4832      	ldr	r0, [pc, #200]	@ (80017cc <_printf_i+0x23c>)
 8001704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	6831      	ldr	r1, [r6, #0]
 800170c:	061f      	lsls	r7, r3, #24
 800170e:	f851 5b04 	ldr.w	r5, [r1], #4
 8001712:	d402      	bmi.n	800171a <_printf_i+0x18a>
 8001714:	065f      	lsls	r7, r3, #25
 8001716:	bf48      	it	mi
 8001718:	b2ad      	uxthmi	r5, r5
 800171a:	6031      	str	r1, [r6, #0]
 800171c:	07d9      	lsls	r1, r3, #31
 800171e:	bf44      	itt	mi
 8001720:	f043 0320 	orrmi.w	r3, r3, #32
 8001724:	6023      	strmi	r3, [r4, #0]
 8001726:	b11d      	cbz	r5, 8001730 <_printf_i+0x1a0>
 8001728:	2310      	movs	r3, #16
 800172a:	e7ab      	b.n	8001684 <_printf_i+0xf4>
 800172c:	4826      	ldr	r0, [pc, #152]	@ (80017c8 <_printf_i+0x238>)
 800172e:	e7e9      	b.n	8001704 <_printf_i+0x174>
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	f023 0320 	bic.w	r3, r3, #32
 8001736:	6023      	str	r3, [r4, #0]
 8001738:	e7f6      	b.n	8001728 <_printf_i+0x198>
 800173a:	4616      	mov	r6, r2
 800173c:	e7bd      	b.n	80016ba <_printf_i+0x12a>
 800173e:	6833      	ldr	r3, [r6, #0]
 8001740:	6825      	ldr	r5, [r4, #0]
 8001742:	1d18      	adds	r0, r3, #4
 8001744:	6961      	ldr	r1, [r4, #20]
 8001746:	6030      	str	r0, [r6, #0]
 8001748:	062e      	lsls	r6, r5, #24
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	d501      	bpl.n	8001752 <_printf_i+0x1c2>
 800174e:	6019      	str	r1, [r3, #0]
 8001750:	e002      	b.n	8001758 <_printf_i+0x1c8>
 8001752:	0668      	lsls	r0, r5, #25
 8001754:	d5fb      	bpl.n	800174e <_printf_i+0x1be>
 8001756:	8019      	strh	r1, [r3, #0]
 8001758:	2300      	movs	r3, #0
 800175a:	4616      	mov	r6, r2
 800175c:	6123      	str	r3, [r4, #16]
 800175e:	e7bc      	b.n	80016da <_printf_i+0x14a>
 8001760:	6833      	ldr	r3, [r6, #0]
 8001762:	2100      	movs	r1, #0
 8001764:	1d1a      	adds	r2, r3, #4
 8001766:	6032      	str	r2, [r6, #0]
 8001768:	681e      	ldr	r6, [r3, #0]
 800176a:	6862      	ldr	r2, [r4, #4]
 800176c:	4630      	mov	r0, r6
 800176e:	f000 f859 	bl	8001824 <memchr>
 8001772:	b108      	cbz	r0, 8001778 <_printf_i+0x1e8>
 8001774:	1b80      	subs	r0, r0, r6
 8001776:	6060      	str	r0, [r4, #4]
 8001778:	6863      	ldr	r3, [r4, #4]
 800177a:	6123      	str	r3, [r4, #16]
 800177c:	2300      	movs	r3, #0
 800177e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001782:	e7aa      	b.n	80016da <_printf_i+0x14a>
 8001784:	4632      	mov	r2, r6
 8001786:	4649      	mov	r1, r9
 8001788:	4640      	mov	r0, r8
 800178a:	6923      	ldr	r3, [r4, #16]
 800178c:	47d0      	blx	sl
 800178e:	3001      	adds	r0, #1
 8001790:	d0ad      	beq.n	80016ee <_printf_i+0x15e>
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	079b      	lsls	r3, r3, #30
 8001796:	d413      	bmi.n	80017c0 <_printf_i+0x230>
 8001798:	68e0      	ldr	r0, [r4, #12]
 800179a:	9b03      	ldr	r3, [sp, #12]
 800179c:	4298      	cmp	r0, r3
 800179e:	bfb8      	it	lt
 80017a0:	4618      	movlt	r0, r3
 80017a2:	e7a6      	b.n	80016f2 <_printf_i+0x162>
 80017a4:	2301      	movs	r3, #1
 80017a6:	4632      	mov	r2, r6
 80017a8:	4649      	mov	r1, r9
 80017aa:	4640      	mov	r0, r8
 80017ac:	47d0      	blx	sl
 80017ae:	3001      	adds	r0, #1
 80017b0:	d09d      	beq.n	80016ee <_printf_i+0x15e>
 80017b2:	3501      	adds	r5, #1
 80017b4:	68e3      	ldr	r3, [r4, #12]
 80017b6:	9903      	ldr	r1, [sp, #12]
 80017b8:	1a5b      	subs	r3, r3, r1
 80017ba:	42ab      	cmp	r3, r5
 80017bc:	dcf2      	bgt.n	80017a4 <_printf_i+0x214>
 80017be:	e7eb      	b.n	8001798 <_printf_i+0x208>
 80017c0:	2500      	movs	r5, #0
 80017c2:	f104 0619 	add.w	r6, r4, #25
 80017c6:	e7f5      	b.n	80017b4 <_printf_i+0x224>
 80017c8:	0800197f 	.word	0x0800197f
 80017cc:	08001990 	.word	0x08001990

080017d0 <memmove>:
 80017d0:	4288      	cmp	r0, r1
 80017d2:	b510      	push	{r4, lr}
 80017d4:	eb01 0402 	add.w	r4, r1, r2
 80017d8:	d902      	bls.n	80017e0 <memmove+0x10>
 80017da:	4284      	cmp	r4, r0
 80017dc:	4623      	mov	r3, r4
 80017de:	d807      	bhi.n	80017f0 <memmove+0x20>
 80017e0:	1e43      	subs	r3, r0, #1
 80017e2:	42a1      	cmp	r1, r4
 80017e4:	d008      	beq.n	80017f8 <memmove+0x28>
 80017e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80017ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80017ee:	e7f8      	b.n	80017e2 <memmove+0x12>
 80017f0:	4601      	mov	r1, r0
 80017f2:	4402      	add	r2, r0
 80017f4:	428a      	cmp	r2, r1
 80017f6:	d100      	bne.n	80017fa <memmove+0x2a>
 80017f8:	bd10      	pop	{r4, pc}
 80017fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001802:	e7f7      	b.n	80017f4 <memmove+0x24>

08001804 <_sbrk_r>:
 8001804:	b538      	push	{r3, r4, r5, lr}
 8001806:	2300      	movs	r3, #0
 8001808:	4d05      	ldr	r5, [pc, #20]	@ (8001820 <_sbrk_r+0x1c>)
 800180a:	4604      	mov	r4, r0
 800180c:	4608      	mov	r0, r1
 800180e:	602b      	str	r3, [r5, #0]
 8001810:	f7ff fb3e 	bl	8000e90 <_sbrk>
 8001814:	1c43      	adds	r3, r0, #1
 8001816:	d102      	bne.n	800181e <_sbrk_r+0x1a>
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	b103      	cbz	r3, 800181e <_sbrk_r+0x1a>
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	bd38      	pop	{r3, r4, r5, pc}
 8001820:	200001b0 	.word	0x200001b0

08001824 <memchr>:
 8001824:	4603      	mov	r3, r0
 8001826:	b510      	push	{r4, lr}
 8001828:	b2c9      	uxtb	r1, r1
 800182a:	4402      	add	r2, r0
 800182c:	4293      	cmp	r3, r2
 800182e:	4618      	mov	r0, r3
 8001830:	d101      	bne.n	8001836 <memchr+0x12>
 8001832:	2000      	movs	r0, #0
 8001834:	e003      	b.n	800183e <memchr+0x1a>
 8001836:	7804      	ldrb	r4, [r0, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	428c      	cmp	r4, r1
 800183c:	d1f6      	bne.n	800182c <memchr+0x8>
 800183e:	bd10      	pop	{r4, pc}

08001840 <memcpy>:
 8001840:	440a      	add	r2, r1
 8001842:	4291      	cmp	r1, r2
 8001844:	f100 33ff 	add.w	r3, r0, #4294967295
 8001848:	d100      	bne.n	800184c <memcpy+0xc>
 800184a:	4770      	bx	lr
 800184c:	b510      	push	{r4, lr}
 800184e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001852:	4291      	cmp	r1, r2
 8001854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001858:	d1f9      	bne.n	800184e <memcpy+0xe>
 800185a:	bd10      	pop	{r4, pc}

0800185c <_realloc_r>:
 800185c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001860:	4680      	mov	r8, r0
 8001862:	4615      	mov	r5, r2
 8001864:	460c      	mov	r4, r1
 8001866:	b921      	cbnz	r1, 8001872 <_realloc_r+0x16>
 8001868:	4611      	mov	r1, r2
 800186a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800186e:	f7ff bc39 	b.w	80010e4 <_malloc_r>
 8001872:	b92a      	cbnz	r2, 8001880 <_realloc_r+0x24>
 8001874:	f7ff fbcc 	bl	8001010 <_free_r>
 8001878:	2400      	movs	r4, #0
 800187a:	4620      	mov	r0, r4
 800187c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001880:	f000 f81a 	bl	80018b8 <_malloc_usable_size_r>
 8001884:	4285      	cmp	r5, r0
 8001886:	4606      	mov	r6, r0
 8001888:	d802      	bhi.n	8001890 <_realloc_r+0x34>
 800188a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800188e:	d8f4      	bhi.n	800187a <_realloc_r+0x1e>
 8001890:	4629      	mov	r1, r5
 8001892:	4640      	mov	r0, r8
 8001894:	f7ff fc26 	bl	80010e4 <_malloc_r>
 8001898:	4607      	mov	r7, r0
 800189a:	2800      	cmp	r0, #0
 800189c:	d0ec      	beq.n	8001878 <_realloc_r+0x1c>
 800189e:	42b5      	cmp	r5, r6
 80018a0:	462a      	mov	r2, r5
 80018a2:	4621      	mov	r1, r4
 80018a4:	bf28      	it	cs
 80018a6:	4632      	movcs	r2, r6
 80018a8:	f7ff ffca 	bl	8001840 <memcpy>
 80018ac:	4621      	mov	r1, r4
 80018ae:	4640      	mov	r0, r8
 80018b0:	f7ff fbae 	bl	8001010 <_free_r>
 80018b4:	463c      	mov	r4, r7
 80018b6:	e7e0      	b.n	800187a <_realloc_r+0x1e>

080018b8 <_malloc_usable_size_r>:
 80018b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018bc:	1f18      	subs	r0, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bfbc      	itt	lt
 80018c2:	580b      	ldrlt	r3, [r1, r0]
 80018c4:	18c0      	addlt	r0, r0, r3
 80018c6:	4770      	bx	lr

080018c8 <_init>:
 80018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ca:	bf00      	nop
 80018cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ce:	bc08      	pop	{r3}
 80018d0:	469e      	mov	lr, r3
 80018d2:	4770      	bx	lr

080018d4 <_fini>:
 80018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d6:	bf00      	nop
 80018d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018da:	bc08      	pop	{r3}
 80018dc:	469e      	mov	lr, r3
 80018de:	4770      	bx	lr
