
BaiTapLonNhung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019a4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001ab0  08001ab0  00002ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b4c  08001b4c  00003054  2**0
                  CONTENTS
  4 .ARM          00000000  08001b4c  08001b4c  00003054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b4c  08001b4c  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b4c  08001b4c  00002b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b50  08001b50  00002b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001b54  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  08001ba8  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08001ba8  000031c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011a0  00000000  00000000  0000307d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000623  00000000  00000000  0000421d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  00004840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000018b  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ff3  00000000  00000000  00004bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a41  00000000  00000000  0001abee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eebc  00000000  00000000  0001d62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c4eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e10  00000000  00000000  0009c530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0009d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a98 	.word	0x08001a98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08001a98 	.word	0x08001a98

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__gesf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpsf2+0x4>
 800098e:	bf00      	nop

08000990 <__lesf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpsf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpsf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b2:	d011      	beq.n	80009d8 <__cmpsf2+0x40>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009ba:	bf18      	it	ne
 80009bc:	ea90 0f01 	teqne	r0, r1
 80009c0:	bf58      	it	pl
 80009c2:	ebb2 0003 	subspl.w	r0, r2, r3
 80009c6:	bf88      	it	hi
 80009c8:	17c8      	asrhi	r0, r1, #31
 80009ca:	bf38      	it	cc
 80009cc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009d0:	bf18      	it	ne
 80009d2:	f040 0001 	orrne.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009dc:	d102      	bne.n	80009e4 <__cmpsf2+0x4c>
 80009de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009e2:	d105      	bne.n	80009f0 <__cmpsf2+0x58>
 80009e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009e8:	d1e4      	bne.n	80009b4 <__cmpsf2+0x1c>
 80009ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009ee:	d0e1      	beq.n	80009b4 <__cmpsf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cfrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4608      	mov	r0, r1
 80009fc:	4661      	mov	r1, ip
 80009fe:	e7ff      	b.n	8000a00 <__aeabi_cfcmpeq>

08000a00 <__aeabi_cfcmpeq>:
 8000a00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a02:	f7ff ffc9 	bl	8000998 <__cmpsf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a10 <__aeabi_fcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cfcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_fcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cfcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_fcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cfcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_fcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffd2 	bl	80009f8 <__aeabi_cfrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_fcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc8 	bl	80009f8 <__aeabi_cfrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <SystemInit72MHz>:
void gpio_input_pb(uint8_t pin);
void dht_output_mode(void);
uint8_t dht22_read(float *temp);

// === SYSTEM ===
void SystemInit72MHz(void) {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
    FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_2;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <SystemInit72MHz+0x74>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ae8 <SystemInit72MHz+0x74>)
 8000a7e:	f043 0314 	orr.w	r3, r3, #20
 8000a82:	6013      	str	r3, [r2, #0]
    RCC->CR |= RCC_CR_HSEON;
 8000a84:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <SystemInit72MHz+0x78>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a18      	ldr	r2, [pc, #96]	@ (8000aec <SystemInit72MHz+0x78>)
 8000a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a8e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8000a90:	bf00      	nop
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <SystemInit72MHz+0x78>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <SystemInit72MHz+0x1e>
    RCC->CFGR |= RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL9;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <SystemInit72MHz+0x78>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <SystemInit72MHz+0x78>)
 8000aa4:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8000aa8:	6053      	str	r3, [r2, #4]
    RCC->CR |= RCC_CR_PLLON;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <SystemInit72MHz+0x78>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a0f      	ldr	r2, [pc, #60]	@ (8000aec <SystemInit72MHz+0x78>)
 8000ab0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ab4:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8000ab6:	bf00      	nop
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <SystemInit72MHz+0x78>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f9      	beq.n	8000ab8 <SystemInit72MHz+0x44>
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <SystemInit72MHz+0x78>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <SystemInit72MHz+0x78>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	6053      	str	r3, [r2, #4]
    while (!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000ad0:	bf00      	nop
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <SystemInit72MHz+0x78>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f9      	beq.n	8000ad2 <SystemInit72MHz+0x5e>
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	40021000 	.word	0x40021000

08000af0 <uart_init>:

void uart_init(void) {
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN | RCC_APB2ENR_AFIOEN;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <uart_init+0x44>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b34 <uart_init+0x44>)
 8000afa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afe:	f043 0305 	orr.w	r3, r3, #5
 8000b02:	6193      	str	r3, [r2, #24]
    GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <uart_init+0x48>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a0b      	ldr	r2, [pc, #44]	@ (8000b38 <uart_init+0x48>)
 8000b0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000b0e:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x0B << 4); // PA9: AF push-pull
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <uart_init+0x48>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	4a08      	ldr	r2, [pc, #32]	@ (8000b38 <uart_init+0x48>)
 8000b16:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000b1a:	6053      	str	r3, [r2, #4]
    USART1->BRR = 72000000 / 9600;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <uart_init+0x4c>)
 8000b1e:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8000b22:	609a      	str	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_UE;
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <uart_init+0x4c>)
 8000b26:	f242 0208 	movw	r2, #8200	@ 0x2008
 8000b2a:	60da      	str	r2, [r3, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40013800 	.word	0x40013800

08000b40 <uart_send>:

void uart_send(char *s) {
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    while (*s) {
 8000b48:	e00c      	b.n	8000b64 <uart_send+0x24>
        while (!(USART1->SR & USART_SR_TXE));
 8000b4a:	bf00      	nop
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <uart_send+0x38>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f9      	beq.n	8000b4c <uart_send+0xc>
        USART1->DR = *s++;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <uart_send+0x38>)
 8000b62:	605a      	str	r2, [r3, #4]
    while (*s) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1ee      	bne.n	8000b4a <uart_send+0xa>
    }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40013800 	.word	0x40013800

08000b7c <timer_init>:

// === TIMER ===
void timer_init(void) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000b80:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <timer_init+0x3c>)
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb8 <timer_init+0x3c>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	61d3      	str	r3, [r2, #28]
    TIM2->PSC = 72 - 1;
 8000b8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b90:	2247      	movs	r2, #71	@ 0x47
 8000b92:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 0xFFFF;
 8000b94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 8000b9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6013      	str	r3, [r2, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <delay_us>:

void delay_us(uint16_t us) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
    TIM2->CNT = 0;
 8000bc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    while (TIM2->CNT < us);
 8000bce:	bf00      	nop
 8000bd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d3f9      	bcc.n	8000bd0 <delay_us+0x14>
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <delay_ms>:

void delay_ms(uint16_t ms) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
    while (ms--) delay_us(1000);
 8000bf2:	e003      	b.n	8000bfc <delay_ms+0x14>
 8000bf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf8:	f7ff ffe0 	bl	8000bbc <delay_us>
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	1e5a      	subs	r2, r3, #1
 8000c00:	80fa      	strh	r2, [r7, #6]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f6      	bne.n	8000bf4 <delay_ms+0xc>
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <gpio_output_pb>:

// === GPIO ===
void gpio_output_pb(uint8_t pin) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <gpio_output_pb+0x88>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c98 <gpio_output_pb+0x88>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6193      	str	r3, [r2, #24]
    if (pin >= 8) {
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d919      	bls.n	8000c60 <gpio_output_pb+0x50>
        GPIOB->CRH &= ~(0xF << ((pin - 8) * 4));
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <gpio_output_pb+0x8c>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	79fa      	ldrb	r2, [r7, #7]
 8000c32:	3a08      	subs	r2, #8
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	210f      	movs	r1, #15
 8000c38:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3c:	43d2      	mvns	r2, r2
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4a16      	ldr	r2, [pc, #88]	@ (8000c9c <gpio_output_pb+0x8c>)
 8000c42:	400b      	ands	r3, r1
 8000c44:	6053      	str	r3, [r2, #4]
        GPIOB->CRH |= (0x3 << ((pin - 8) * 4));
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <gpio_output_pb+0x8c>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	3a08      	subs	r2, #8
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	2103      	movs	r1, #3
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	4611      	mov	r1, r2
 8000c58:	4a10      	ldr	r2, [pc, #64]	@ (8000c9c <gpio_output_pb+0x8c>)
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	6053      	str	r3, [r2, #4]
    } else {
        GPIOB->CRL &= ~(0xF << (pin * 4));
        GPIOB->CRL |= (0x3 << (pin * 4));
    }
}
 8000c5e:	e016      	b.n	8000c8e <gpio_output_pb+0x7e>
        GPIOB->CRL &= ~(0xF << (pin * 4));
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <gpio_output_pb+0x8c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	0092      	lsls	r2, r2, #2
 8000c68:	210f      	movs	r1, #15
 8000c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6e:	43d2      	mvns	r2, r2
 8000c70:	4611      	mov	r1, r2
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <gpio_output_pb+0x8c>)
 8000c74:	400b      	ands	r3, r1
 8000c76:	6013      	str	r3, [r2, #0]
        GPIOB->CRL |= (0x3 << (pin * 4));
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <gpio_output_pb+0x8c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	79fa      	ldrb	r2, [r7, #7]
 8000c7e:	0092      	lsls	r2, r2, #2
 8000c80:	2103      	movs	r1, #3
 8000c82:	fa01 f202 	lsl.w	r2, r1, r2
 8000c86:	4611      	mov	r1, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <gpio_output_pb+0x8c>)
 8000c8a:	430b      	orrs	r3, r1
 8000c8c:	6013      	str	r3, [r2, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010c00 	.word	0x40010c00

08000ca0 <gpio_input_pb>:

void gpio_input_pb(uint8_t pin) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <gpio_input_pb+0x88>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a1e      	ldr	r2, [pc, #120]	@ (8000d28 <gpio_input_pb+0x88>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	6193      	str	r3, [r2, #24]
    if (pin >= 8) {
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b07      	cmp	r3, #7
 8000cba:	d919      	bls.n	8000cf0 <gpio_input_pb+0x50>
        GPIOB->CRH &= ~(0xF << ((pin - 8) * 4));
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <gpio_input_pb+0x8c>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	79fa      	ldrb	r2, [r7, #7]
 8000cc2:	3a08      	subs	r2, #8
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	43d2      	mvns	r2, r2
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4a16      	ldr	r2, [pc, #88]	@ (8000d2c <gpio_input_pb+0x8c>)
 8000cd2:	400b      	ands	r3, r1
 8000cd4:	6053      	str	r3, [r2, #4]
        GPIOB->CRH |= (0x4 << ((pin - 8) * 4));
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <gpio_input_pb+0x8c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	3a08      	subs	r2, #8
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4a10      	ldr	r2, [pc, #64]	@ (8000d2c <gpio_input_pb+0x8c>)
 8000cea:	430b      	orrs	r3, r1
 8000cec:	6053      	str	r3, [r2, #4]
    } else {
        GPIOB->CRL &= ~(0xF << (pin * 4));
        GPIOB->CRL |= (0x4 << (pin * 4));
    }
}
 8000cee:	e016      	b.n	8000d1e <gpio_input_pb+0x7e>
        GPIOB->CRL &= ~(0xF << (pin * 4));
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <gpio_input_pb+0x8c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	43d2      	mvns	r2, r2
 8000d00:	4611      	mov	r1, r2
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <gpio_input_pb+0x8c>)
 8000d04:	400b      	ands	r3, r1
 8000d06:	6013      	str	r3, [r2, #0]
        GPIOB->CRL |= (0x4 << (pin * 4));
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <gpio_input_pb+0x8c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	2104      	movs	r1, #4
 8000d12:	fa01 f202 	lsl.w	r2, r1, r2
 8000d16:	4611      	mov	r1, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <gpio_input_pb+0x8c>)
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	6013      	str	r3, [r2, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010c00 	.word	0x40010c00

08000d30 <dht_output_mode>:

void dht_output_mode(void) {
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
    GPIOB->CRH &= ~(0xF << 4);  // PB9
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <dht_output_mode+0x24>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	4a06      	ldr	r2, [pc, #24]	@ (8000d54 <dht_output_mode+0x24>)
 8000d3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000d3e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x3 << 4);   // Output push-pull
 8000d40:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <dht_output_mode+0x24>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a03      	ldr	r2, [pc, #12]	@ (8000d54 <dht_output_mode+0x24>)
 8000d46:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000d4a:	6053      	str	r3, [r2, #4]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40010c00 	.word	0x40010c00

08000d58 <fan_on>:

// === FAN ===
void fan_on(void) {
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
    GPIOB->ODR |= (1 << FAN_IN1);
 8000d5c:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <fan_on+0x24>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	4a06      	ldr	r2, [pc, #24]	@ (8000d7c <fan_on+0x24>)
 8000d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d66:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR &= ~(1 << FAN_IN2);
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <fan_on+0x24>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	4a03      	ldr	r2, [pc, #12]	@ (8000d7c <fan_on+0x24>)
 8000d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <fan_off>:

void fan_off(void) {
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
    GPIOB->ODR &= ~(1 << FAN_IN1);
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <fan_off+0x24>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	4a06      	ldr	r2, [pc, #24]	@ (8000da4 <fan_off+0x24>)
 8000d8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d8e:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR &= ~(1 << FAN_IN2);
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <fan_off+0x24>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	4a03      	ldr	r2, [pc, #12]	@ (8000da4 <fan_off+0x24>)
 8000d96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40010c00 	.word	0x40010c00

08000da8 <dht22_read>:

// === DHT22 ===
uint8_t dht22_read(float *temp) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    uint8_t data[5] = {0};
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	2300      	movs	r3, #0
 8000db6:	733b      	strb	r3, [r7, #12]
    uint32_t timeout;

    // Start signal
    dht_output_mode();
 8000db8:	f7ff ffba 	bl	8000d30 <dht_output_mode>
    GPIOB->ODR &= ~(1 << DHT_PIN);
 8000dbc:	4b64      	ldr	r3, [pc, #400]	@ (8000f50 <dht22_read+0x1a8>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	4a63      	ldr	r2, [pc, #396]	@ (8000f50 <dht22_read+0x1a8>)
 8000dc2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000dc6:	60d3      	str	r3, [r2, #12]
    delay_ms(2);  // ≥1ms
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f7ff ff0d 	bl	8000be8 <delay_ms>
    GPIOB->ODR |= (1 << DHT_PIN);
 8000dce:	4b60      	ldr	r3, [pc, #384]	@ (8000f50 <dht22_read+0x1a8>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	4a5f      	ldr	r2, [pc, #380]	@ (8000f50 <dht22_read+0x1a8>)
 8000dd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd8:	60d3      	str	r3, [r2, #12]
    delay_us(30);
 8000dda:	201e      	movs	r0, #30
 8000ddc:	f7ff feee 	bl	8000bbc <delay_us>
    gpio_input_pb(DHT_PIN);
 8000de0:	2009      	movs	r0, #9
 8000de2:	f7ff ff5d 	bl	8000ca0 <gpio_input_pb>

    // Wait response
    timeout = 10000;
 8000de6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000dea:	617b      	str	r3, [r7, #20]
    while (!(GPIOB->IDR & (1 << DHT_PIN)) && timeout--) delay_us(1);
 8000dec:	e002      	b.n	8000df4 <dht22_read+0x4c>
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff fee4 	bl	8000bbc <delay_us>
 8000df4:	4b56      	ldr	r3, [pc, #344]	@ (8000f50 <dht22_read+0x1a8>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d104      	bne.n	8000e0a <dht22_read+0x62>
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	617a      	str	r2, [r7, #20]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f1      	bne.n	8000dee <dht22_read+0x46>
    if (!timeout) return 1;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <dht22_read+0x6c>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e098      	b.n	8000f46 <dht22_read+0x19e>

    timeout = 10000;
 8000e14:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e18:	617b      	str	r3, [r7, #20]
    while ((GPIOB->IDR & (1 << DHT_PIN)) && timeout--) delay_us(1);
 8000e1a:	e002      	b.n	8000e22 <dht22_read+0x7a>
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f7ff fecd 	bl	8000bbc <delay_us>
 8000e22:	4b4b      	ldr	r3, [pc, #300]	@ (8000f50 <dht22_read+0x1a8>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d004      	beq.n	8000e38 <dht22_read+0x90>
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	617a      	str	r2, [r7, #20]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f1      	bne.n	8000e1c <dht22_read+0x74>
    if (!timeout) return 1;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <dht22_read+0x9a>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e081      	b.n	8000f46 <dht22_read+0x19e>

    // Read 5 bytes
    for (uint8_t i = 0; i < 5; i++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	74fb      	strb	r3, [r7, #19]
 8000e46:	e051      	b.n	8000eec <dht22_read+0x144>
        for (uint8_t j = 0; j < 8; j++) {
 8000e48:	2300      	movs	r3, #0
 8000e4a:	74bb      	strb	r3, [r7, #18]
 8000e4c:	e048      	b.n	8000ee0 <dht22_read+0x138>
            timeout = 10000;
 8000e4e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e52:	617b      	str	r3, [r7, #20]
            while (!(GPIOB->IDR & (1 << DHT_PIN)) && timeout--) delay_us(1);
 8000e54:	e002      	b.n	8000e5c <dht22_read+0xb4>
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff feb0 	bl	8000bbc <delay_us>
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <dht22_read+0x1a8>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d104      	bne.n	8000e72 <dht22_read+0xca>
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	617a      	str	r2, [r7, #20]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f1      	bne.n	8000e56 <dht22_read+0xae>

            delay_us(40);
 8000e72:	2028      	movs	r0, #40	@ 0x28
 8000e74:	f7ff fea2 	bl	8000bbc <delay_us>
            data[i] <<= 1;
 8000e78:	7cfb      	ldrb	r3, [r7, #19]
 8000e7a:	3318      	adds	r3, #24
 8000e7c:	443b      	add	r3, r7
 8000e7e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	0052      	lsls	r2, r2, #1
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	3318      	adds	r3, #24
 8000e8a:	443b      	add	r3, r7
 8000e8c:	f803 2c10 	strb.w	r2, [r3, #-16]
            if (GPIOB->IDR & (1 << DHT_PIN)) data[i] |= 1;
 8000e90:	4b2f      	ldr	r3, [pc, #188]	@ (8000f50 <dht22_read+0x1a8>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00c      	beq.n	8000eb6 <dht22_read+0x10e>
 8000e9c:	7cfb      	ldrb	r3, [r7, #19]
 8000e9e:	3318      	adds	r3, #24
 8000ea0:	443b      	add	r3, r7
 8000ea2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000ea6:	7cfb      	ldrb	r3, [r7, #19]
 8000ea8:	f042 0201 	orr.w	r2, r2, #1
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	3318      	adds	r3, #24
 8000eb0:	443b      	add	r3, r7
 8000eb2:	f803 2c10 	strb.w	r2, [r3, #-16]

            timeout = 10000;
 8000eb6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000eba:	617b      	str	r3, [r7, #20]
            while ((GPIOB->IDR & (1 << DHT_PIN)) && timeout--) delay_us(1);
 8000ebc:	e002      	b.n	8000ec4 <dht22_read+0x11c>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fe7c 	bl	8000bbc <delay_us>
 8000ec4:	4b22      	ldr	r3, [pc, #136]	@ (8000f50 <dht22_read+0x1a8>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d004      	beq.n	8000eda <dht22_read+0x132>
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	1e5a      	subs	r2, r3, #1
 8000ed4:	617a      	str	r2, [r7, #20]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f1      	bne.n	8000ebe <dht22_read+0x116>
        for (uint8_t j = 0; j < 8; j++) {
 8000eda:	7cbb      	ldrb	r3, [r7, #18]
 8000edc:	3301      	adds	r3, #1
 8000ede:	74bb      	strb	r3, [r7, #18]
 8000ee0:	7cbb      	ldrb	r3, [r7, #18]
 8000ee2:	2b07      	cmp	r3, #7
 8000ee4:	d9b3      	bls.n	8000e4e <dht22_read+0xa6>
    for (uint8_t i = 0; i < 5; i++) {
 8000ee6:	7cfb      	ldrb	r3, [r7, #19]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	74fb      	strb	r3, [r7, #19]
 8000eec:	7cfb      	ldrb	r3, [r7, #19]
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d9aa      	bls.n	8000e48 <dht22_read+0xa0>
        }
    }

    if (data[4] != ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) return 1;
 8000ef2:	7b3b      	ldrb	r3, [r7, #12]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	7a3b      	ldrb	r3, [r7, #8]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	7a7b      	ldrb	r3, [r7, #9]
 8000efc:	440b      	add	r3, r1
 8000efe:	7ab9      	ldrb	r1, [r7, #10]
 8000f00:	440b      	add	r3, r1
 8000f02:	7af9      	ldrb	r1, [r7, #11]
 8000f04:	440b      	add	r3, r1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d001      	beq.n	8000f10 <dht22_read+0x168>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e01a      	b.n	8000f46 <dht22_read+0x19e>

    uint16_t raw_temp = (data[2] << 8) | data[3];
 8000f10:	7abb      	ldrb	r3, [r7, #10]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	7afb      	ldrb	r3, [r7, #11]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	823b      	strh	r3, [r7, #16]
    *temp = raw_temp / 10.0;
 8000f20:	8a3b      	ldrh	r3, [r7, #16]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fa64 	bl	80003f0 <__aeabi_i2d>
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <dht22_read+0x1ac>)
 8000f2e:	f7ff fbf3 	bl	8000718 <__aeabi_ddiv>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fcd5 	bl	80008e8 <__aeabi_d2f>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	601a      	str	r2, [r3, #0]

    return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	40240000 	.word	0x40240000

08000f58 <main>:

// === MAIN ===
int main(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b092      	sub	sp, #72	@ 0x48
 8000f5c:	af00      	add	r7, sp, #0
    SystemInit72MHz();
 8000f5e:	f7ff fd89 	bl	8000a74 <SystemInit72MHz>
    uart_init();
 8000f62:	f7ff fdc5 	bl	8000af0 <uart_init>
    timer_init();
 8000f66:	f7ff fe09 	bl	8000b7c <timer_init>
    gpio_output_pb(FAN_IN1);
 8000f6a:	2007      	movs	r0, #7
 8000f6c:	f7ff fe50 	bl	8000c10 <gpio_output_pb>
    gpio_output_pb(FAN_IN2);
 8000f70:	2006      	movs	r0, #6
 8000f72:	f7ff fe4d 	bl	8000c10 <gpio_output_pb>
    gpio_input_pb(DHT_PIN);
 8000f76:	2009      	movs	r0, #9
 8000f78:	f7ff fe92 	bl	8000ca0 <gpio_input_pb>

    uart_send("Khoi dong OK\n");
 8000f7c:	481c      	ldr	r0, [pc, #112]	@ (8000ff0 <main+0x98>)
 8000f7e:	f7ff fddf 	bl	8000b40 <uart_send>

    float temp = 0;
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	647b      	str	r3, [r7, #68]	@ 0x44
    char buff[64];

    while (1) {
        if (dht22_read(&temp) == 0) {
 8000f88:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff0b 	bl	8000da8 <dht22_read>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d121      	bne.n	8000fdc <main+0x84>
            sprintf(buff, "Nhiet do: %.1f C\n", temp);
 8000f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fa3a 	bl	8000414 <__aeabi_f2d>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	1d38      	adds	r0, r7, #4
 8000fa6:	4913      	ldr	r1, [pc, #76]	@ (8000ff4 <main+0x9c>)
 8000fa8:	f000 f8ce 	bl	8001148 <siprintf>
            uart_send(buff);
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fdc6 	bl	8000b40 <uart_send>

            if (temp >= 34) {
 8000fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fb6:	4910      	ldr	r1, [pc, #64]	@ (8000ff8 <main+0xa0>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fd47 	bl	8000a4c <__aeabi_fcmpge>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <main+0x78>
                uart_send("Trang thai quat: BAT\n");
 8000fc4:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <main+0xa4>)
 8000fc6:	f7ff fdbb 	bl	8000b40 <uart_send>
                fan_on();
 8000fca:	f7ff fec5 	bl	8000d58 <fan_on>
 8000fce:	e00a      	b.n	8000fe6 <main+0x8e>
            } else {
                uart_send("Trang thai quat: TAT\n");
 8000fd0:	480b      	ldr	r0, [pc, #44]	@ (8001000 <main+0xa8>)
 8000fd2:	f7ff fdb5 	bl	8000b40 <uart_send>
                fan_off();
 8000fd6:	f7ff fed3 	bl	8000d80 <fan_off>
 8000fda:	e004      	b.n	8000fe6 <main+0x8e>
            }
        } else {
            uart_send("Doc DHT22 that bai!\n");
 8000fdc:	4809      	ldr	r0, [pc, #36]	@ (8001004 <main+0xac>)
 8000fde:	f7ff fdaf 	bl	8000b40 <uart_send>
            fan_off();
 8000fe2:	f7ff fecd 	bl	8000d80 <fan_off>
        }
        delay_ms(2000);
 8000fe6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fea:	f7ff fdfd 	bl	8000be8 <delay_ms>
        if (dht22_read(&temp) == 0) {
 8000fee:	e7cb      	b.n	8000f88 <main+0x30>
 8000ff0:	08001ab0 	.word	0x08001ab0
 8000ff4:	08001ac0 	.word	0x08001ac0
 8000ff8:	42080000 	.word	0x42080000
 8000ffc:	08001ad4 	.word	0x08001ad4
 8001000:	08001aec 	.word	0x08001aec
 8001004:	08001b04 	.word	0x08001b04

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f864 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f000 f87a 	bl	8001188 <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20005000 	.word	0x20005000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	20000070 	.word	0x20000070
 80010c8:	200001c0 	.word	0x200001c0

080010cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d8:	f7ff fff8 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480b      	ldr	r0, [pc, #44]	@ (800110c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010de:	490c      	ldr	r1, [pc, #48]	@ (8001110 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001114 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010f4:	4c09      	ldr	r4, [pc, #36]	@ (800111c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001102:	f000 f847 	bl	8001194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001106:	f7ff ff27 	bl	8000f58 <main>
  bx lr
 800110a:	4770      	bx	lr
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001114:	08001b54 	.word	0x08001b54
  ldr r2, =_sbss
 8001118:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800111c:	200001c0 	.word	0x200001c0

08001120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_2_IRQHandler>
	...

08001124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_IncTick+0x1c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_IncTick+0x20>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <HAL_IncTick+0x20>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000000 	.word	0x20000000
 8001144:	20000074 	.word	0x20000074

08001148 <siprintf>:
 8001148:	b40e      	push	{r1, r2, r3}
 800114a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800114e:	b500      	push	{lr}
 8001150:	b09c      	sub	sp, #112	@ 0x70
 8001152:	ab1d      	add	r3, sp, #116	@ 0x74
 8001154:	9002      	str	r0, [sp, #8]
 8001156:	9006      	str	r0, [sp, #24]
 8001158:	9107      	str	r1, [sp, #28]
 800115a:	9104      	str	r1, [sp, #16]
 800115c:	4808      	ldr	r0, [pc, #32]	@ (8001180 <siprintf+0x38>)
 800115e:	4909      	ldr	r1, [pc, #36]	@ (8001184 <siprintf+0x3c>)
 8001160:	f853 2b04 	ldr.w	r2, [r3], #4
 8001164:	9105      	str	r1, [sp, #20]
 8001166:	6800      	ldr	r0, [r0, #0]
 8001168:	a902      	add	r1, sp, #8
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	f000 f98a 	bl	8001484 <_svfiprintf_r>
 8001170:	2200      	movs	r2, #0
 8001172:	9b02      	ldr	r3, [sp, #8]
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	b01c      	add	sp, #112	@ 0x70
 8001178:	f85d eb04 	ldr.w	lr, [sp], #4
 800117c:	b003      	add	sp, #12
 800117e:	4770      	bx	lr
 8001180:	20000004 	.word	0x20000004
 8001184:	ffff0208 	.word	0xffff0208

08001188 <__errno>:
 8001188:	4b01      	ldr	r3, [pc, #4]	@ (8001190 <__errno+0x8>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000004 	.word	0x20000004

08001194 <__libc_init_array>:
 8001194:	b570      	push	{r4, r5, r6, lr}
 8001196:	2600      	movs	r6, #0
 8001198:	4d0c      	ldr	r5, [pc, #48]	@ (80011cc <__libc_init_array+0x38>)
 800119a:	4c0d      	ldr	r4, [pc, #52]	@ (80011d0 <__libc_init_array+0x3c>)
 800119c:	1b64      	subs	r4, r4, r5
 800119e:	10a4      	asrs	r4, r4, #2
 80011a0:	42a6      	cmp	r6, r4
 80011a2:	d109      	bne.n	80011b8 <__libc_init_array+0x24>
 80011a4:	f000 fc78 	bl	8001a98 <_init>
 80011a8:	2600      	movs	r6, #0
 80011aa:	4d0a      	ldr	r5, [pc, #40]	@ (80011d4 <__libc_init_array+0x40>)
 80011ac:	4c0a      	ldr	r4, [pc, #40]	@ (80011d8 <__libc_init_array+0x44>)
 80011ae:	1b64      	subs	r4, r4, r5
 80011b0:	10a4      	asrs	r4, r4, #2
 80011b2:	42a6      	cmp	r6, r4
 80011b4:	d105      	bne.n	80011c2 <__libc_init_array+0x2e>
 80011b6:	bd70      	pop	{r4, r5, r6, pc}
 80011b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80011bc:	4798      	blx	r3
 80011be:	3601      	adds	r6, #1
 80011c0:	e7ee      	b.n	80011a0 <__libc_init_array+0xc>
 80011c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c6:	4798      	blx	r3
 80011c8:	3601      	adds	r6, #1
 80011ca:	e7f2      	b.n	80011b2 <__libc_init_array+0x1e>
 80011cc:	08001b4c 	.word	0x08001b4c
 80011d0:	08001b4c 	.word	0x08001b4c
 80011d4:	08001b4c 	.word	0x08001b4c
 80011d8:	08001b50 	.word	0x08001b50

080011dc <__retarget_lock_acquire_recursive>:
 80011dc:	4770      	bx	lr

080011de <__retarget_lock_release_recursive>:
 80011de:	4770      	bx	lr

080011e0 <_free_r>:
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4605      	mov	r5, r0
 80011e4:	2900      	cmp	r1, #0
 80011e6:	d040      	beq.n	800126a <_free_r+0x8a>
 80011e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011ec:	1f0c      	subs	r4, r1, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bfb8      	it	lt
 80011f2:	18e4      	addlt	r4, r4, r3
 80011f4:	f000 f8de 	bl	80013b4 <__malloc_lock>
 80011f8:	4a1c      	ldr	r2, [pc, #112]	@ (800126c <_free_r+0x8c>)
 80011fa:	6813      	ldr	r3, [r2, #0]
 80011fc:	b933      	cbnz	r3, 800120c <_free_r+0x2c>
 80011fe:	6063      	str	r3, [r4, #4]
 8001200:	6014      	str	r4, [r2, #0]
 8001202:	4628      	mov	r0, r5
 8001204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001208:	f000 b8da 	b.w	80013c0 <__malloc_unlock>
 800120c:	42a3      	cmp	r3, r4
 800120e:	d908      	bls.n	8001222 <_free_r+0x42>
 8001210:	6820      	ldr	r0, [r4, #0]
 8001212:	1821      	adds	r1, r4, r0
 8001214:	428b      	cmp	r3, r1
 8001216:	bf01      	itttt	eq
 8001218:	6819      	ldreq	r1, [r3, #0]
 800121a:	685b      	ldreq	r3, [r3, #4]
 800121c:	1809      	addeq	r1, r1, r0
 800121e:	6021      	streq	r1, [r4, #0]
 8001220:	e7ed      	b.n	80011fe <_free_r+0x1e>
 8001222:	461a      	mov	r2, r3
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	b10b      	cbz	r3, 800122c <_free_r+0x4c>
 8001228:	42a3      	cmp	r3, r4
 800122a:	d9fa      	bls.n	8001222 <_free_r+0x42>
 800122c:	6811      	ldr	r1, [r2, #0]
 800122e:	1850      	adds	r0, r2, r1
 8001230:	42a0      	cmp	r0, r4
 8001232:	d10b      	bne.n	800124c <_free_r+0x6c>
 8001234:	6820      	ldr	r0, [r4, #0]
 8001236:	4401      	add	r1, r0
 8001238:	1850      	adds	r0, r2, r1
 800123a:	4283      	cmp	r3, r0
 800123c:	6011      	str	r1, [r2, #0]
 800123e:	d1e0      	bne.n	8001202 <_free_r+0x22>
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4408      	add	r0, r1
 8001246:	6010      	str	r0, [r2, #0]
 8001248:	6053      	str	r3, [r2, #4]
 800124a:	e7da      	b.n	8001202 <_free_r+0x22>
 800124c:	d902      	bls.n	8001254 <_free_r+0x74>
 800124e:	230c      	movs	r3, #12
 8001250:	602b      	str	r3, [r5, #0]
 8001252:	e7d6      	b.n	8001202 <_free_r+0x22>
 8001254:	6820      	ldr	r0, [r4, #0]
 8001256:	1821      	adds	r1, r4, r0
 8001258:	428b      	cmp	r3, r1
 800125a:	bf01      	itttt	eq
 800125c:	6819      	ldreq	r1, [r3, #0]
 800125e:	685b      	ldreq	r3, [r3, #4]
 8001260:	1809      	addeq	r1, r1, r0
 8001262:	6021      	streq	r1, [r4, #0]
 8001264:	6063      	str	r3, [r4, #4]
 8001266:	6054      	str	r4, [r2, #4]
 8001268:	e7cb      	b.n	8001202 <_free_r+0x22>
 800126a:	bd38      	pop	{r3, r4, r5, pc}
 800126c:	200001bc 	.word	0x200001bc

08001270 <sbrk_aligned>:
 8001270:	b570      	push	{r4, r5, r6, lr}
 8001272:	4e0f      	ldr	r6, [pc, #60]	@ (80012b0 <sbrk_aligned+0x40>)
 8001274:	460c      	mov	r4, r1
 8001276:	6831      	ldr	r1, [r6, #0]
 8001278:	4605      	mov	r5, r0
 800127a:	b911      	cbnz	r1, 8001282 <sbrk_aligned+0x12>
 800127c:	f000 fbaa 	bl	80019d4 <_sbrk_r>
 8001280:	6030      	str	r0, [r6, #0]
 8001282:	4621      	mov	r1, r4
 8001284:	4628      	mov	r0, r5
 8001286:	f000 fba5 	bl	80019d4 <_sbrk_r>
 800128a:	1c43      	adds	r3, r0, #1
 800128c:	d103      	bne.n	8001296 <sbrk_aligned+0x26>
 800128e:	f04f 34ff 	mov.w	r4, #4294967295
 8001292:	4620      	mov	r0, r4
 8001294:	bd70      	pop	{r4, r5, r6, pc}
 8001296:	1cc4      	adds	r4, r0, #3
 8001298:	f024 0403 	bic.w	r4, r4, #3
 800129c:	42a0      	cmp	r0, r4
 800129e:	d0f8      	beq.n	8001292 <sbrk_aligned+0x22>
 80012a0:	1a21      	subs	r1, r4, r0
 80012a2:	4628      	mov	r0, r5
 80012a4:	f000 fb96 	bl	80019d4 <_sbrk_r>
 80012a8:	3001      	adds	r0, #1
 80012aa:	d1f2      	bne.n	8001292 <sbrk_aligned+0x22>
 80012ac:	e7ef      	b.n	800128e <sbrk_aligned+0x1e>
 80012ae:	bf00      	nop
 80012b0:	200001b8 	.word	0x200001b8

080012b4 <_malloc_r>:
 80012b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012b8:	1ccd      	adds	r5, r1, #3
 80012ba:	f025 0503 	bic.w	r5, r5, #3
 80012be:	3508      	adds	r5, #8
 80012c0:	2d0c      	cmp	r5, #12
 80012c2:	bf38      	it	cc
 80012c4:	250c      	movcc	r5, #12
 80012c6:	2d00      	cmp	r5, #0
 80012c8:	4606      	mov	r6, r0
 80012ca:	db01      	blt.n	80012d0 <_malloc_r+0x1c>
 80012cc:	42a9      	cmp	r1, r5
 80012ce:	d904      	bls.n	80012da <_malloc_r+0x26>
 80012d0:	230c      	movs	r3, #12
 80012d2:	6033      	str	r3, [r6, #0]
 80012d4:	2000      	movs	r0, #0
 80012d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80013b0 <_malloc_r+0xfc>
 80012de:	f000 f869 	bl	80013b4 <__malloc_lock>
 80012e2:	f8d8 3000 	ldr.w	r3, [r8]
 80012e6:	461c      	mov	r4, r3
 80012e8:	bb44      	cbnz	r4, 800133c <_malloc_r+0x88>
 80012ea:	4629      	mov	r1, r5
 80012ec:	4630      	mov	r0, r6
 80012ee:	f7ff ffbf 	bl	8001270 <sbrk_aligned>
 80012f2:	1c43      	adds	r3, r0, #1
 80012f4:	4604      	mov	r4, r0
 80012f6:	d158      	bne.n	80013aa <_malloc_r+0xf6>
 80012f8:	f8d8 4000 	ldr.w	r4, [r8]
 80012fc:	4627      	mov	r7, r4
 80012fe:	2f00      	cmp	r7, #0
 8001300:	d143      	bne.n	800138a <_malloc_r+0xd6>
 8001302:	2c00      	cmp	r4, #0
 8001304:	d04b      	beq.n	800139e <_malloc_r+0xea>
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	4639      	mov	r1, r7
 800130a:	4630      	mov	r0, r6
 800130c:	eb04 0903 	add.w	r9, r4, r3
 8001310:	f000 fb60 	bl	80019d4 <_sbrk_r>
 8001314:	4581      	cmp	r9, r0
 8001316:	d142      	bne.n	800139e <_malloc_r+0xea>
 8001318:	6821      	ldr	r1, [r4, #0]
 800131a:	4630      	mov	r0, r6
 800131c:	1a6d      	subs	r5, r5, r1
 800131e:	4629      	mov	r1, r5
 8001320:	f7ff ffa6 	bl	8001270 <sbrk_aligned>
 8001324:	3001      	adds	r0, #1
 8001326:	d03a      	beq.n	800139e <_malloc_r+0xea>
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	442b      	add	r3, r5
 800132c:	6023      	str	r3, [r4, #0]
 800132e:	f8d8 3000 	ldr.w	r3, [r8]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	bb62      	cbnz	r2, 8001390 <_malloc_r+0xdc>
 8001336:	f8c8 7000 	str.w	r7, [r8]
 800133a:	e00f      	b.n	800135c <_malloc_r+0xa8>
 800133c:	6822      	ldr	r2, [r4, #0]
 800133e:	1b52      	subs	r2, r2, r5
 8001340:	d420      	bmi.n	8001384 <_malloc_r+0xd0>
 8001342:	2a0b      	cmp	r2, #11
 8001344:	d917      	bls.n	8001376 <_malloc_r+0xc2>
 8001346:	1961      	adds	r1, r4, r5
 8001348:	42a3      	cmp	r3, r4
 800134a:	6025      	str	r5, [r4, #0]
 800134c:	bf18      	it	ne
 800134e:	6059      	strne	r1, [r3, #4]
 8001350:	6863      	ldr	r3, [r4, #4]
 8001352:	bf08      	it	eq
 8001354:	f8c8 1000 	streq.w	r1, [r8]
 8001358:	5162      	str	r2, [r4, r5]
 800135a:	604b      	str	r3, [r1, #4]
 800135c:	4630      	mov	r0, r6
 800135e:	f000 f82f 	bl	80013c0 <__malloc_unlock>
 8001362:	f104 000b 	add.w	r0, r4, #11
 8001366:	1d23      	adds	r3, r4, #4
 8001368:	f020 0007 	bic.w	r0, r0, #7
 800136c:	1ac2      	subs	r2, r0, r3
 800136e:	bf1c      	itt	ne
 8001370:	1a1b      	subne	r3, r3, r0
 8001372:	50a3      	strne	r3, [r4, r2]
 8001374:	e7af      	b.n	80012d6 <_malloc_r+0x22>
 8001376:	6862      	ldr	r2, [r4, #4]
 8001378:	42a3      	cmp	r3, r4
 800137a:	bf0c      	ite	eq
 800137c:	f8c8 2000 	streq.w	r2, [r8]
 8001380:	605a      	strne	r2, [r3, #4]
 8001382:	e7eb      	b.n	800135c <_malloc_r+0xa8>
 8001384:	4623      	mov	r3, r4
 8001386:	6864      	ldr	r4, [r4, #4]
 8001388:	e7ae      	b.n	80012e8 <_malloc_r+0x34>
 800138a:	463c      	mov	r4, r7
 800138c:	687f      	ldr	r7, [r7, #4]
 800138e:	e7b6      	b.n	80012fe <_malloc_r+0x4a>
 8001390:	461a      	mov	r2, r3
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	42a3      	cmp	r3, r4
 8001396:	d1fb      	bne.n	8001390 <_malloc_r+0xdc>
 8001398:	2300      	movs	r3, #0
 800139a:	6053      	str	r3, [r2, #4]
 800139c:	e7de      	b.n	800135c <_malloc_r+0xa8>
 800139e:	230c      	movs	r3, #12
 80013a0:	4630      	mov	r0, r6
 80013a2:	6033      	str	r3, [r6, #0]
 80013a4:	f000 f80c 	bl	80013c0 <__malloc_unlock>
 80013a8:	e794      	b.n	80012d4 <_malloc_r+0x20>
 80013aa:	6005      	str	r5, [r0, #0]
 80013ac:	e7d6      	b.n	800135c <_malloc_r+0xa8>
 80013ae:	bf00      	nop
 80013b0:	200001bc 	.word	0x200001bc

080013b4 <__malloc_lock>:
 80013b4:	4801      	ldr	r0, [pc, #4]	@ (80013bc <__malloc_lock+0x8>)
 80013b6:	f7ff bf11 	b.w	80011dc <__retarget_lock_acquire_recursive>
 80013ba:	bf00      	nop
 80013bc:	200001b4 	.word	0x200001b4

080013c0 <__malloc_unlock>:
 80013c0:	4801      	ldr	r0, [pc, #4]	@ (80013c8 <__malloc_unlock+0x8>)
 80013c2:	f7ff bf0c 	b.w	80011de <__retarget_lock_release_recursive>
 80013c6:	bf00      	nop
 80013c8:	200001b4 	.word	0x200001b4

080013cc <__ssputs_r>:
 80013cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013d0:	461f      	mov	r7, r3
 80013d2:	688e      	ldr	r6, [r1, #8]
 80013d4:	4682      	mov	sl, r0
 80013d6:	42be      	cmp	r6, r7
 80013d8:	460c      	mov	r4, r1
 80013da:	4690      	mov	r8, r2
 80013dc:	680b      	ldr	r3, [r1, #0]
 80013de:	d82d      	bhi.n	800143c <__ssputs_r+0x70>
 80013e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80013e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80013e8:	d026      	beq.n	8001438 <__ssputs_r+0x6c>
 80013ea:	6965      	ldr	r5, [r4, #20]
 80013ec:	6909      	ldr	r1, [r1, #16]
 80013ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80013f2:	eba3 0901 	sub.w	r9, r3, r1
 80013f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80013fa:	1c7b      	adds	r3, r7, #1
 80013fc:	444b      	add	r3, r9
 80013fe:	106d      	asrs	r5, r5, #1
 8001400:	429d      	cmp	r5, r3
 8001402:	bf38      	it	cc
 8001404:	461d      	movcc	r5, r3
 8001406:	0553      	lsls	r3, r2, #21
 8001408:	d527      	bpl.n	800145a <__ssputs_r+0x8e>
 800140a:	4629      	mov	r1, r5
 800140c:	f7ff ff52 	bl	80012b4 <_malloc_r>
 8001410:	4606      	mov	r6, r0
 8001412:	b360      	cbz	r0, 800146e <__ssputs_r+0xa2>
 8001414:	464a      	mov	r2, r9
 8001416:	6921      	ldr	r1, [r4, #16]
 8001418:	f000 fafa 	bl	8001a10 <memcpy>
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001426:	81a3      	strh	r3, [r4, #12]
 8001428:	6126      	str	r6, [r4, #16]
 800142a:	444e      	add	r6, r9
 800142c:	6026      	str	r6, [r4, #0]
 800142e:	463e      	mov	r6, r7
 8001430:	6165      	str	r5, [r4, #20]
 8001432:	eba5 0509 	sub.w	r5, r5, r9
 8001436:	60a5      	str	r5, [r4, #8]
 8001438:	42be      	cmp	r6, r7
 800143a:	d900      	bls.n	800143e <__ssputs_r+0x72>
 800143c:	463e      	mov	r6, r7
 800143e:	4632      	mov	r2, r6
 8001440:	4641      	mov	r1, r8
 8001442:	6820      	ldr	r0, [r4, #0]
 8001444:	f000 faac 	bl	80019a0 <memmove>
 8001448:	2000      	movs	r0, #0
 800144a:	68a3      	ldr	r3, [r4, #8]
 800144c:	1b9b      	subs	r3, r3, r6
 800144e:	60a3      	str	r3, [r4, #8]
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	4433      	add	r3, r6
 8001454:	6023      	str	r3, [r4, #0]
 8001456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800145a:	462a      	mov	r2, r5
 800145c:	f000 fae6 	bl	8001a2c <_realloc_r>
 8001460:	4606      	mov	r6, r0
 8001462:	2800      	cmp	r0, #0
 8001464:	d1e0      	bne.n	8001428 <__ssputs_r+0x5c>
 8001466:	4650      	mov	r0, sl
 8001468:	6921      	ldr	r1, [r4, #16]
 800146a:	f7ff feb9 	bl	80011e0 <_free_r>
 800146e:	230c      	movs	r3, #12
 8001470:	f8ca 3000 	str.w	r3, [sl]
 8001474:	89a3      	ldrh	r3, [r4, #12]
 8001476:	f04f 30ff 	mov.w	r0, #4294967295
 800147a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800147e:	81a3      	strh	r3, [r4, #12]
 8001480:	e7e9      	b.n	8001456 <__ssputs_r+0x8a>
	...

08001484 <_svfiprintf_r>:
 8001484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001488:	4698      	mov	r8, r3
 800148a:	898b      	ldrh	r3, [r1, #12]
 800148c:	4607      	mov	r7, r0
 800148e:	061b      	lsls	r3, r3, #24
 8001490:	460d      	mov	r5, r1
 8001492:	4614      	mov	r4, r2
 8001494:	b09d      	sub	sp, #116	@ 0x74
 8001496:	d510      	bpl.n	80014ba <_svfiprintf_r+0x36>
 8001498:	690b      	ldr	r3, [r1, #16]
 800149a:	b973      	cbnz	r3, 80014ba <_svfiprintf_r+0x36>
 800149c:	2140      	movs	r1, #64	@ 0x40
 800149e:	f7ff ff09 	bl	80012b4 <_malloc_r>
 80014a2:	6028      	str	r0, [r5, #0]
 80014a4:	6128      	str	r0, [r5, #16]
 80014a6:	b930      	cbnz	r0, 80014b6 <_svfiprintf_r+0x32>
 80014a8:	230c      	movs	r3, #12
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	b01d      	add	sp, #116	@ 0x74
 80014b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b6:	2340      	movs	r3, #64	@ 0x40
 80014b8:	616b      	str	r3, [r5, #20]
 80014ba:	2300      	movs	r3, #0
 80014bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80014be:	2320      	movs	r3, #32
 80014c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80014c4:	2330      	movs	r3, #48	@ 0x30
 80014c6:	f04f 0901 	mov.w	r9, #1
 80014ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80014ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001668 <_svfiprintf_r+0x1e4>
 80014d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80014d6:	4623      	mov	r3, r4
 80014d8:	469a      	mov	sl, r3
 80014da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014de:	b10a      	cbz	r2, 80014e4 <_svfiprintf_r+0x60>
 80014e0:	2a25      	cmp	r2, #37	@ 0x25
 80014e2:	d1f9      	bne.n	80014d8 <_svfiprintf_r+0x54>
 80014e4:	ebba 0b04 	subs.w	fp, sl, r4
 80014e8:	d00b      	beq.n	8001502 <_svfiprintf_r+0x7e>
 80014ea:	465b      	mov	r3, fp
 80014ec:	4622      	mov	r2, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	4638      	mov	r0, r7
 80014f2:	f7ff ff6b 	bl	80013cc <__ssputs_r>
 80014f6:	3001      	adds	r0, #1
 80014f8:	f000 80a7 	beq.w	800164a <_svfiprintf_r+0x1c6>
 80014fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80014fe:	445a      	add	r2, fp
 8001500:	9209      	str	r2, [sp, #36]	@ 0x24
 8001502:	f89a 3000 	ldrb.w	r3, [sl]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 809f 	beq.w	800164a <_svfiprintf_r+0x1c6>
 800150c:	2300      	movs	r3, #0
 800150e:	f04f 32ff 	mov.w	r2, #4294967295
 8001512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001516:	f10a 0a01 	add.w	sl, sl, #1
 800151a:	9304      	str	r3, [sp, #16]
 800151c:	9307      	str	r3, [sp, #28]
 800151e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001522:	931a      	str	r3, [sp, #104]	@ 0x68
 8001524:	4654      	mov	r4, sl
 8001526:	2205      	movs	r2, #5
 8001528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800152c:	484e      	ldr	r0, [pc, #312]	@ (8001668 <_svfiprintf_r+0x1e4>)
 800152e:	f000 fa61 	bl	80019f4 <memchr>
 8001532:	9a04      	ldr	r2, [sp, #16]
 8001534:	b9d8      	cbnz	r0, 800156e <_svfiprintf_r+0xea>
 8001536:	06d0      	lsls	r0, r2, #27
 8001538:	bf44      	itt	mi
 800153a:	2320      	movmi	r3, #32
 800153c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001540:	0711      	lsls	r1, r2, #28
 8001542:	bf44      	itt	mi
 8001544:	232b      	movmi	r3, #43	@ 0x2b
 8001546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800154a:	f89a 3000 	ldrb.w	r3, [sl]
 800154e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001550:	d015      	beq.n	800157e <_svfiprintf_r+0xfa>
 8001552:	4654      	mov	r4, sl
 8001554:	2000      	movs	r0, #0
 8001556:	f04f 0c0a 	mov.w	ip, #10
 800155a:	9a07      	ldr	r2, [sp, #28]
 800155c:	4621      	mov	r1, r4
 800155e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001562:	3b30      	subs	r3, #48	@ 0x30
 8001564:	2b09      	cmp	r3, #9
 8001566:	d94b      	bls.n	8001600 <_svfiprintf_r+0x17c>
 8001568:	b1b0      	cbz	r0, 8001598 <_svfiprintf_r+0x114>
 800156a:	9207      	str	r2, [sp, #28]
 800156c:	e014      	b.n	8001598 <_svfiprintf_r+0x114>
 800156e:	eba0 0308 	sub.w	r3, r0, r8
 8001572:	fa09 f303 	lsl.w	r3, r9, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	46a2      	mov	sl, r4
 800157a:	9304      	str	r3, [sp, #16]
 800157c:	e7d2      	b.n	8001524 <_svfiprintf_r+0xa0>
 800157e:	9b03      	ldr	r3, [sp, #12]
 8001580:	1d19      	adds	r1, r3, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	9103      	str	r1, [sp, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	bfbb      	ittet	lt
 800158a:	425b      	neglt	r3, r3
 800158c:	f042 0202 	orrlt.w	r2, r2, #2
 8001590:	9307      	strge	r3, [sp, #28]
 8001592:	9307      	strlt	r3, [sp, #28]
 8001594:	bfb8      	it	lt
 8001596:	9204      	strlt	r2, [sp, #16]
 8001598:	7823      	ldrb	r3, [r4, #0]
 800159a:	2b2e      	cmp	r3, #46	@ 0x2e
 800159c:	d10a      	bne.n	80015b4 <_svfiprintf_r+0x130>
 800159e:	7863      	ldrb	r3, [r4, #1]
 80015a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80015a2:	d132      	bne.n	800160a <_svfiprintf_r+0x186>
 80015a4:	9b03      	ldr	r3, [sp, #12]
 80015a6:	3402      	adds	r4, #2
 80015a8:	1d1a      	adds	r2, r3, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	9203      	str	r2, [sp, #12]
 80015ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80015b2:	9305      	str	r3, [sp, #20]
 80015b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800166c <_svfiprintf_r+0x1e8>
 80015b8:	2203      	movs	r2, #3
 80015ba:	4650      	mov	r0, sl
 80015bc:	7821      	ldrb	r1, [r4, #0]
 80015be:	f000 fa19 	bl	80019f4 <memchr>
 80015c2:	b138      	cbz	r0, 80015d4 <_svfiprintf_r+0x150>
 80015c4:	2240      	movs	r2, #64	@ 0x40
 80015c6:	9b04      	ldr	r3, [sp, #16]
 80015c8:	eba0 000a 	sub.w	r0, r0, sl
 80015cc:	4082      	lsls	r2, r0
 80015ce:	4313      	orrs	r3, r2
 80015d0:	3401      	adds	r4, #1
 80015d2:	9304      	str	r3, [sp, #16]
 80015d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015d8:	2206      	movs	r2, #6
 80015da:	4825      	ldr	r0, [pc, #148]	@ (8001670 <_svfiprintf_r+0x1ec>)
 80015dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80015e0:	f000 fa08 	bl	80019f4 <memchr>
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d036      	beq.n	8001656 <_svfiprintf_r+0x1d2>
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <_svfiprintf_r+0x1f0>)
 80015ea:	bb1b      	cbnz	r3, 8001634 <_svfiprintf_r+0x1b0>
 80015ec:	9b03      	ldr	r3, [sp, #12]
 80015ee:	3307      	adds	r3, #7
 80015f0:	f023 0307 	bic.w	r3, r3, #7
 80015f4:	3308      	adds	r3, #8
 80015f6:	9303      	str	r3, [sp, #12]
 80015f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80015fa:	4433      	add	r3, r6
 80015fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80015fe:	e76a      	b.n	80014d6 <_svfiprintf_r+0x52>
 8001600:	460c      	mov	r4, r1
 8001602:	2001      	movs	r0, #1
 8001604:	fb0c 3202 	mla	r2, ip, r2, r3
 8001608:	e7a8      	b.n	800155c <_svfiprintf_r+0xd8>
 800160a:	2300      	movs	r3, #0
 800160c:	f04f 0c0a 	mov.w	ip, #10
 8001610:	4619      	mov	r1, r3
 8001612:	3401      	adds	r4, #1
 8001614:	9305      	str	r3, [sp, #20]
 8001616:	4620      	mov	r0, r4
 8001618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800161c:	3a30      	subs	r2, #48	@ 0x30
 800161e:	2a09      	cmp	r2, #9
 8001620:	d903      	bls.n	800162a <_svfiprintf_r+0x1a6>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0c6      	beq.n	80015b4 <_svfiprintf_r+0x130>
 8001626:	9105      	str	r1, [sp, #20]
 8001628:	e7c4      	b.n	80015b4 <_svfiprintf_r+0x130>
 800162a:	4604      	mov	r4, r0
 800162c:	2301      	movs	r3, #1
 800162e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001632:	e7f0      	b.n	8001616 <_svfiprintf_r+0x192>
 8001634:	ab03      	add	r3, sp, #12
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	462a      	mov	r2, r5
 800163a:	4638      	mov	r0, r7
 800163c:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <_svfiprintf_r+0x1f4>)
 800163e:	a904      	add	r1, sp, #16
 8001640:	f3af 8000 	nop.w
 8001644:	1c42      	adds	r2, r0, #1
 8001646:	4606      	mov	r6, r0
 8001648:	d1d6      	bne.n	80015f8 <_svfiprintf_r+0x174>
 800164a:	89ab      	ldrh	r3, [r5, #12]
 800164c:	065b      	lsls	r3, r3, #25
 800164e:	f53f af2d 	bmi.w	80014ac <_svfiprintf_r+0x28>
 8001652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001654:	e72c      	b.n	80014b0 <_svfiprintf_r+0x2c>
 8001656:	ab03      	add	r3, sp, #12
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	462a      	mov	r2, r5
 800165c:	4638      	mov	r0, r7
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <_svfiprintf_r+0x1f4>)
 8001660:	a904      	add	r1, sp, #16
 8001662:	f000 f87d 	bl	8001760 <_printf_i>
 8001666:	e7ed      	b.n	8001644 <_svfiprintf_r+0x1c0>
 8001668:	08001b19 	.word	0x08001b19
 800166c:	08001b1f 	.word	0x08001b1f
 8001670:	08001b23 	.word	0x08001b23
 8001674:	00000000 	.word	0x00000000
 8001678:	080013cd 	.word	0x080013cd

0800167c <_printf_common>:
 800167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001680:	4616      	mov	r6, r2
 8001682:	4698      	mov	r8, r3
 8001684:	688a      	ldr	r2, [r1, #8]
 8001686:	690b      	ldr	r3, [r1, #16]
 8001688:	4607      	mov	r7, r0
 800168a:	4293      	cmp	r3, r2
 800168c:	bfb8      	it	lt
 800168e:	4613      	movlt	r3, r2
 8001690:	6033      	str	r3, [r6, #0]
 8001692:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001696:	460c      	mov	r4, r1
 8001698:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800169c:	b10a      	cbz	r2, 80016a2 <_printf_common+0x26>
 800169e:	3301      	adds	r3, #1
 80016a0:	6033      	str	r3, [r6, #0]
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	0699      	lsls	r1, r3, #26
 80016a6:	bf42      	ittt	mi
 80016a8:	6833      	ldrmi	r3, [r6, #0]
 80016aa:	3302      	addmi	r3, #2
 80016ac:	6033      	strmi	r3, [r6, #0]
 80016ae:	6825      	ldr	r5, [r4, #0]
 80016b0:	f015 0506 	ands.w	r5, r5, #6
 80016b4:	d106      	bne.n	80016c4 <_printf_common+0x48>
 80016b6:	f104 0a19 	add.w	sl, r4, #25
 80016ba:	68e3      	ldr	r3, [r4, #12]
 80016bc:	6832      	ldr	r2, [r6, #0]
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	42ab      	cmp	r3, r5
 80016c2:	dc2b      	bgt.n	800171c <_printf_common+0xa0>
 80016c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80016c8:	6822      	ldr	r2, [r4, #0]
 80016ca:	3b00      	subs	r3, #0
 80016cc:	bf18      	it	ne
 80016ce:	2301      	movne	r3, #1
 80016d0:	0692      	lsls	r2, r2, #26
 80016d2:	d430      	bmi.n	8001736 <_printf_common+0xba>
 80016d4:	4641      	mov	r1, r8
 80016d6:	4638      	mov	r0, r7
 80016d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80016dc:	47c8      	blx	r9
 80016de:	3001      	adds	r0, #1
 80016e0:	d023      	beq.n	800172a <_printf_common+0xae>
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	6922      	ldr	r2, [r4, #16]
 80016e6:	f003 0306 	and.w	r3, r3, #6
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf14      	ite	ne
 80016ee:	2500      	movne	r5, #0
 80016f0:	6833      	ldreq	r3, [r6, #0]
 80016f2:	f04f 0600 	mov.w	r6, #0
 80016f6:	bf08      	it	eq
 80016f8:	68e5      	ldreq	r5, [r4, #12]
 80016fa:	f104 041a 	add.w	r4, r4, #26
 80016fe:	bf08      	it	eq
 8001700:	1aed      	subeq	r5, r5, r3
 8001702:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001706:	bf08      	it	eq
 8001708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800170c:	4293      	cmp	r3, r2
 800170e:	bfc4      	itt	gt
 8001710:	1a9b      	subgt	r3, r3, r2
 8001712:	18ed      	addgt	r5, r5, r3
 8001714:	42b5      	cmp	r5, r6
 8001716:	d11a      	bne.n	800174e <_printf_common+0xd2>
 8001718:	2000      	movs	r0, #0
 800171a:	e008      	b.n	800172e <_printf_common+0xb2>
 800171c:	2301      	movs	r3, #1
 800171e:	4652      	mov	r2, sl
 8001720:	4641      	mov	r1, r8
 8001722:	4638      	mov	r0, r7
 8001724:	47c8      	blx	r9
 8001726:	3001      	adds	r0, #1
 8001728:	d103      	bne.n	8001732 <_printf_common+0xb6>
 800172a:	f04f 30ff 	mov.w	r0, #4294967295
 800172e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001732:	3501      	adds	r5, #1
 8001734:	e7c1      	b.n	80016ba <_printf_common+0x3e>
 8001736:	2030      	movs	r0, #48	@ 0x30
 8001738:	18e1      	adds	r1, r4, r3
 800173a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001744:	4422      	add	r2, r4
 8001746:	3302      	adds	r3, #2
 8001748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800174c:	e7c2      	b.n	80016d4 <_printf_common+0x58>
 800174e:	2301      	movs	r3, #1
 8001750:	4622      	mov	r2, r4
 8001752:	4641      	mov	r1, r8
 8001754:	4638      	mov	r0, r7
 8001756:	47c8      	blx	r9
 8001758:	3001      	adds	r0, #1
 800175a:	d0e6      	beq.n	800172a <_printf_common+0xae>
 800175c:	3601      	adds	r6, #1
 800175e:	e7d9      	b.n	8001714 <_printf_common+0x98>

08001760 <_printf_i>:
 8001760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001764:	7e0f      	ldrb	r7, [r1, #24]
 8001766:	4691      	mov	r9, r2
 8001768:	2f78      	cmp	r7, #120	@ 0x78
 800176a:	4680      	mov	r8, r0
 800176c:	460c      	mov	r4, r1
 800176e:	469a      	mov	sl, r3
 8001770:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001772:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001776:	d807      	bhi.n	8001788 <_printf_i+0x28>
 8001778:	2f62      	cmp	r7, #98	@ 0x62
 800177a:	d80a      	bhi.n	8001792 <_printf_i+0x32>
 800177c:	2f00      	cmp	r7, #0
 800177e:	f000 80d3 	beq.w	8001928 <_printf_i+0x1c8>
 8001782:	2f58      	cmp	r7, #88	@ 0x58
 8001784:	f000 80ba 	beq.w	80018fc <_printf_i+0x19c>
 8001788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800178c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001790:	e03a      	b.n	8001808 <_printf_i+0xa8>
 8001792:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001796:	2b15      	cmp	r3, #21
 8001798:	d8f6      	bhi.n	8001788 <_printf_i+0x28>
 800179a:	a101      	add	r1, pc, #4	@ (adr r1, 80017a0 <_printf_i+0x40>)
 800179c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80017a0:	080017f9 	.word	0x080017f9
 80017a4:	0800180d 	.word	0x0800180d
 80017a8:	08001789 	.word	0x08001789
 80017ac:	08001789 	.word	0x08001789
 80017b0:	08001789 	.word	0x08001789
 80017b4:	08001789 	.word	0x08001789
 80017b8:	0800180d 	.word	0x0800180d
 80017bc:	08001789 	.word	0x08001789
 80017c0:	08001789 	.word	0x08001789
 80017c4:	08001789 	.word	0x08001789
 80017c8:	08001789 	.word	0x08001789
 80017cc:	0800190f 	.word	0x0800190f
 80017d0:	08001837 	.word	0x08001837
 80017d4:	080018c9 	.word	0x080018c9
 80017d8:	08001789 	.word	0x08001789
 80017dc:	08001789 	.word	0x08001789
 80017e0:	08001931 	.word	0x08001931
 80017e4:	08001789 	.word	0x08001789
 80017e8:	08001837 	.word	0x08001837
 80017ec:	08001789 	.word	0x08001789
 80017f0:	08001789 	.word	0x08001789
 80017f4:	080018d1 	.word	0x080018d1
 80017f8:	6833      	ldr	r3, [r6, #0]
 80017fa:	1d1a      	adds	r2, r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6032      	str	r2, [r6, #0]
 8001800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001804:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001808:	2301      	movs	r3, #1
 800180a:	e09e      	b.n	800194a <_printf_i+0x1ea>
 800180c:	6833      	ldr	r3, [r6, #0]
 800180e:	6820      	ldr	r0, [r4, #0]
 8001810:	1d19      	adds	r1, r3, #4
 8001812:	6031      	str	r1, [r6, #0]
 8001814:	0606      	lsls	r6, r0, #24
 8001816:	d501      	bpl.n	800181c <_printf_i+0xbc>
 8001818:	681d      	ldr	r5, [r3, #0]
 800181a:	e003      	b.n	8001824 <_printf_i+0xc4>
 800181c:	0645      	lsls	r5, r0, #25
 800181e:	d5fb      	bpl.n	8001818 <_printf_i+0xb8>
 8001820:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001824:	2d00      	cmp	r5, #0
 8001826:	da03      	bge.n	8001830 <_printf_i+0xd0>
 8001828:	232d      	movs	r3, #45	@ 0x2d
 800182a:	426d      	negs	r5, r5
 800182c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001830:	230a      	movs	r3, #10
 8001832:	4859      	ldr	r0, [pc, #356]	@ (8001998 <_printf_i+0x238>)
 8001834:	e011      	b.n	800185a <_printf_i+0xfa>
 8001836:	6821      	ldr	r1, [r4, #0]
 8001838:	6833      	ldr	r3, [r6, #0]
 800183a:	0608      	lsls	r0, r1, #24
 800183c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001840:	d402      	bmi.n	8001848 <_printf_i+0xe8>
 8001842:	0649      	lsls	r1, r1, #25
 8001844:	bf48      	it	mi
 8001846:	b2ad      	uxthmi	r5, r5
 8001848:	2f6f      	cmp	r7, #111	@ 0x6f
 800184a:	6033      	str	r3, [r6, #0]
 800184c:	bf14      	ite	ne
 800184e:	230a      	movne	r3, #10
 8001850:	2308      	moveq	r3, #8
 8001852:	4851      	ldr	r0, [pc, #324]	@ (8001998 <_printf_i+0x238>)
 8001854:	2100      	movs	r1, #0
 8001856:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800185a:	6866      	ldr	r6, [r4, #4]
 800185c:	2e00      	cmp	r6, #0
 800185e:	bfa8      	it	ge
 8001860:	6821      	ldrge	r1, [r4, #0]
 8001862:	60a6      	str	r6, [r4, #8]
 8001864:	bfa4      	itt	ge
 8001866:	f021 0104 	bicge.w	r1, r1, #4
 800186a:	6021      	strge	r1, [r4, #0]
 800186c:	b90d      	cbnz	r5, 8001872 <_printf_i+0x112>
 800186e:	2e00      	cmp	r6, #0
 8001870:	d04b      	beq.n	800190a <_printf_i+0x1aa>
 8001872:	4616      	mov	r6, r2
 8001874:	fbb5 f1f3 	udiv	r1, r5, r3
 8001878:	fb03 5711 	mls	r7, r3, r1, r5
 800187c:	5dc7      	ldrb	r7, [r0, r7]
 800187e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001882:	462f      	mov	r7, r5
 8001884:	42bb      	cmp	r3, r7
 8001886:	460d      	mov	r5, r1
 8001888:	d9f4      	bls.n	8001874 <_printf_i+0x114>
 800188a:	2b08      	cmp	r3, #8
 800188c:	d10b      	bne.n	80018a6 <_printf_i+0x146>
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	07df      	lsls	r7, r3, #31
 8001892:	d508      	bpl.n	80018a6 <_printf_i+0x146>
 8001894:	6923      	ldr	r3, [r4, #16]
 8001896:	6861      	ldr	r1, [r4, #4]
 8001898:	4299      	cmp	r1, r3
 800189a:	bfde      	ittt	le
 800189c:	2330      	movle	r3, #48	@ 0x30
 800189e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80018a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80018a6:	1b92      	subs	r2, r2, r6
 80018a8:	6122      	str	r2, [r4, #16]
 80018aa:	464b      	mov	r3, r9
 80018ac:	4621      	mov	r1, r4
 80018ae:	4640      	mov	r0, r8
 80018b0:	f8cd a000 	str.w	sl, [sp]
 80018b4:	aa03      	add	r2, sp, #12
 80018b6:	f7ff fee1 	bl	800167c <_printf_common>
 80018ba:	3001      	adds	r0, #1
 80018bc:	d14a      	bne.n	8001954 <_printf_i+0x1f4>
 80018be:	f04f 30ff 	mov.w	r0, #4294967295
 80018c2:	b004      	add	sp, #16
 80018c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	f043 0320 	orr.w	r3, r3, #32
 80018ce:	6023      	str	r3, [r4, #0]
 80018d0:	2778      	movs	r7, #120	@ 0x78
 80018d2:	4832      	ldr	r0, [pc, #200]	@ (800199c <_printf_i+0x23c>)
 80018d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	6831      	ldr	r1, [r6, #0]
 80018dc:	061f      	lsls	r7, r3, #24
 80018de:	f851 5b04 	ldr.w	r5, [r1], #4
 80018e2:	d402      	bmi.n	80018ea <_printf_i+0x18a>
 80018e4:	065f      	lsls	r7, r3, #25
 80018e6:	bf48      	it	mi
 80018e8:	b2ad      	uxthmi	r5, r5
 80018ea:	6031      	str	r1, [r6, #0]
 80018ec:	07d9      	lsls	r1, r3, #31
 80018ee:	bf44      	itt	mi
 80018f0:	f043 0320 	orrmi.w	r3, r3, #32
 80018f4:	6023      	strmi	r3, [r4, #0]
 80018f6:	b11d      	cbz	r5, 8001900 <_printf_i+0x1a0>
 80018f8:	2310      	movs	r3, #16
 80018fa:	e7ab      	b.n	8001854 <_printf_i+0xf4>
 80018fc:	4826      	ldr	r0, [pc, #152]	@ (8001998 <_printf_i+0x238>)
 80018fe:	e7e9      	b.n	80018d4 <_printf_i+0x174>
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	f023 0320 	bic.w	r3, r3, #32
 8001906:	6023      	str	r3, [r4, #0]
 8001908:	e7f6      	b.n	80018f8 <_printf_i+0x198>
 800190a:	4616      	mov	r6, r2
 800190c:	e7bd      	b.n	800188a <_printf_i+0x12a>
 800190e:	6833      	ldr	r3, [r6, #0]
 8001910:	6825      	ldr	r5, [r4, #0]
 8001912:	1d18      	adds	r0, r3, #4
 8001914:	6961      	ldr	r1, [r4, #20]
 8001916:	6030      	str	r0, [r6, #0]
 8001918:	062e      	lsls	r6, r5, #24
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	d501      	bpl.n	8001922 <_printf_i+0x1c2>
 800191e:	6019      	str	r1, [r3, #0]
 8001920:	e002      	b.n	8001928 <_printf_i+0x1c8>
 8001922:	0668      	lsls	r0, r5, #25
 8001924:	d5fb      	bpl.n	800191e <_printf_i+0x1be>
 8001926:	8019      	strh	r1, [r3, #0]
 8001928:	2300      	movs	r3, #0
 800192a:	4616      	mov	r6, r2
 800192c:	6123      	str	r3, [r4, #16]
 800192e:	e7bc      	b.n	80018aa <_printf_i+0x14a>
 8001930:	6833      	ldr	r3, [r6, #0]
 8001932:	2100      	movs	r1, #0
 8001934:	1d1a      	adds	r2, r3, #4
 8001936:	6032      	str	r2, [r6, #0]
 8001938:	681e      	ldr	r6, [r3, #0]
 800193a:	6862      	ldr	r2, [r4, #4]
 800193c:	4630      	mov	r0, r6
 800193e:	f000 f859 	bl	80019f4 <memchr>
 8001942:	b108      	cbz	r0, 8001948 <_printf_i+0x1e8>
 8001944:	1b80      	subs	r0, r0, r6
 8001946:	6060      	str	r0, [r4, #4]
 8001948:	6863      	ldr	r3, [r4, #4]
 800194a:	6123      	str	r3, [r4, #16]
 800194c:	2300      	movs	r3, #0
 800194e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001952:	e7aa      	b.n	80018aa <_printf_i+0x14a>
 8001954:	4632      	mov	r2, r6
 8001956:	4649      	mov	r1, r9
 8001958:	4640      	mov	r0, r8
 800195a:	6923      	ldr	r3, [r4, #16]
 800195c:	47d0      	blx	sl
 800195e:	3001      	adds	r0, #1
 8001960:	d0ad      	beq.n	80018be <_printf_i+0x15e>
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	079b      	lsls	r3, r3, #30
 8001966:	d413      	bmi.n	8001990 <_printf_i+0x230>
 8001968:	68e0      	ldr	r0, [r4, #12]
 800196a:	9b03      	ldr	r3, [sp, #12]
 800196c:	4298      	cmp	r0, r3
 800196e:	bfb8      	it	lt
 8001970:	4618      	movlt	r0, r3
 8001972:	e7a6      	b.n	80018c2 <_printf_i+0x162>
 8001974:	2301      	movs	r3, #1
 8001976:	4632      	mov	r2, r6
 8001978:	4649      	mov	r1, r9
 800197a:	4640      	mov	r0, r8
 800197c:	47d0      	blx	sl
 800197e:	3001      	adds	r0, #1
 8001980:	d09d      	beq.n	80018be <_printf_i+0x15e>
 8001982:	3501      	adds	r5, #1
 8001984:	68e3      	ldr	r3, [r4, #12]
 8001986:	9903      	ldr	r1, [sp, #12]
 8001988:	1a5b      	subs	r3, r3, r1
 800198a:	42ab      	cmp	r3, r5
 800198c:	dcf2      	bgt.n	8001974 <_printf_i+0x214>
 800198e:	e7eb      	b.n	8001968 <_printf_i+0x208>
 8001990:	2500      	movs	r5, #0
 8001992:	f104 0619 	add.w	r6, r4, #25
 8001996:	e7f5      	b.n	8001984 <_printf_i+0x224>
 8001998:	08001b2a 	.word	0x08001b2a
 800199c:	08001b3b 	.word	0x08001b3b

080019a0 <memmove>:
 80019a0:	4288      	cmp	r0, r1
 80019a2:	b510      	push	{r4, lr}
 80019a4:	eb01 0402 	add.w	r4, r1, r2
 80019a8:	d902      	bls.n	80019b0 <memmove+0x10>
 80019aa:	4284      	cmp	r4, r0
 80019ac:	4623      	mov	r3, r4
 80019ae:	d807      	bhi.n	80019c0 <memmove+0x20>
 80019b0:	1e43      	subs	r3, r0, #1
 80019b2:	42a1      	cmp	r1, r4
 80019b4:	d008      	beq.n	80019c8 <memmove+0x28>
 80019b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80019ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80019be:	e7f8      	b.n	80019b2 <memmove+0x12>
 80019c0:	4601      	mov	r1, r0
 80019c2:	4402      	add	r2, r0
 80019c4:	428a      	cmp	r2, r1
 80019c6:	d100      	bne.n	80019ca <memmove+0x2a>
 80019c8:	bd10      	pop	{r4, pc}
 80019ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80019ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80019d2:	e7f7      	b.n	80019c4 <memmove+0x24>

080019d4 <_sbrk_r>:
 80019d4:	b538      	push	{r3, r4, r5, lr}
 80019d6:	2300      	movs	r3, #0
 80019d8:	4d05      	ldr	r5, [pc, #20]	@ (80019f0 <_sbrk_r+0x1c>)
 80019da:	4604      	mov	r4, r0
 80019dc:	4608      	mov	r0, r1
 80019de:	602b      	str	r3, [r5, #0]
 80019e0:	f7ff fb3e 	bl	8001060 <_sbrk>
 80019e4:	1c43      	adds	r3, r0, #1
 80019e6:	d102      	bne.n	80019ee <_sbrk_r+0x1a>
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	b103      	cbz	r3, 80019ee <_sbrk_r+0x1a>
 80019ec:	6023      	str	r3, [r4, #0]
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
 80019f0:	200001b0 	.word	0x200001b0

080019f4 <memchr>:
 80019f4:	4603      	mov	r3, r0
 80019f6:	b510      	push	{r4, lr}
 80019f8:	b2c9      	uxtb	r1, r1
 80019fa:	4402      	add	r2, r0
 80019fc:	4293      	cmp	r3, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	d101      	bne.n	8001a06 <memchr+0x12>
 8001a02:	2000      	movs	r0, #0
 8001a04:	e003      	b.n	8001a0e <memchr+0x1a>
 8001a06:	7804      	ldrb	r4, [r0, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	428c      	cmp	r4, r1
 8001a0c:	d1f6      	bne.n	80019fc <memchr+0x8>
 8001a0e:	bd10      	pop	{r4, pc}

08001a10 <memcpy>:
 8001a10:	440a      	add	r2, r1
 8001a12:	4291      	cmp	r1, r2
 8001a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8001a18:	d100      	bne.n	8001a1c <memcpy+0xc>
 8001a1a:	4770      	bx	lr
 8001a1c:	b510      	push	{r4, lr}
 8001a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a22:	4291      	cmp	r1, r2
 8001a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a28:	d1f9      	bne.n	8001a1e <memcpy+0xe>
 8001a2a:	bd10      	pop	{r4, pc}

08001a2c <_realloc_r>:
 8001a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a30:	4680      	mov	r8, r0
 8001a32:	4615      	mov	r5, r2
 8001a34:	460c      	mov	r4, r1
 8001a36:	b921      	cbnz	r1, 8001a42 <_realloc_r+0x16>
 8001a38:	4611      	mov	r1, r2
 8001a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a3e:	f7ff bc39 	b.w	80012b4 <_malloc_r>
 8001a42:	b92a      	cbnz	r2, 8001a50 <_realloc_r+0x24>
 8001a44:	f7ff fbcc 	bl	80011e0 <_free_r>
 8001a48:	2400      	movs	r4, #0
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a50:	f000 f81a 	bl	8001a88 <_malloc_usable_size_r>
 8001a54:	4285      	cmp	r5, r0
 8001a56:	4606      	mov	r6, r0
 8001a58:	d802      	bhi.n	8001a60 <_realloc_r+0x34>
 8001a5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001a5e:	d8f4      	bhi.n	8001a4a <_realloc_r+0x1e>
 8001a60:	4629      	mov	r1, r5
 8001a62:	4640      	mov	r0, r8
 8001a64:	f7ff fc26 	bl	80012b4 <_malloc_r>
 8001a68:	4607      	mov	r7, r0
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d0ec      	beq.n	8001a48 <_realloc_r+0x1c>
 8001a6e:	42b5      	cmp	r5, r6
 8001a70:	462a      	mov	r2, r5
 8001a72:	4621      	mov	r1, r4
 8001a74:	bf28      	it	cs
 8001a76:	4632      	movcs	r2, r6
 8001a78:	f7ff ffca 	bl	8001a10 <memcpy>
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	4640      	mov	r0, r8
 8001a80:	f7ff fbae 	bl	80011e0 <_free_r>
 8001a84:	463c      	mov	r4, r7
 8001a86:	e7e0      	b.n	8001a4a <_realloc_r+0x1e>

08001a88 <_malloc_usable_size_r>:
 8001a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a8c:	1f18      	subs	r0, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bfbc      	itt	lt
 8001a92:	580b      	ldrlt	r3, [r1, r0]
 8001a94:	18c0      	addlt	r0, r0, r3
 8001a96:	4770      	bx	lr

08001a98 <_init>:
 8001a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9a:	bf00      	nop
 8001a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a9e:	bc08      	pop	{r3}
 8001aa0:	469e      	mov	lr, r3
 8001aa2:	4770      	bx	lr

08001aa4 <_fini>:
 8001aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa6:	bf00      	nop
 8001aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aaa:	bc08      	pop	{r3}
 8001aac:	469e      	mov	lr, r3
 8001aae:	4770      	bx	lr
